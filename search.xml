<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AOP的API实现及SpringAOP实现原理</title>
    <url>/2020/10/02/AOP2/</url>
    <content><![CDATA[<h1 id="AOP的API实现"><a href="#AOP的API实现" class="headerlink" title="AOP的API实现"></a>AOP的API实现</h1><p>基于接口的aop实现一般为一下步骤：</p>
<!-- ## 基于动态代理的AOP实例 -->
<p>1.定义被代理者（被代理的类）</p>
<p>2.定义增强（切点几种执行状态中要做的动作）</p>
<p>3.定义切入点（给定规则 （正则表达式、AspectJ表达式），找出切入点位置）</p>
<p>4.定义切面（哪些切入点在执行过程中要做哪些动作 </p>
<p>与业务模块无关，但是却为被有模块所共同使用的逻辑块</p>
<p>5.设置代理 ：动态代理（代理接口）、CGLIB代理（代理具体类）<br>    配置被代理的对象<br>    配置切面<br>    配置被代理的接口</p>
<h2 id="Pointcut"><a href="#Pointcut" class="headerlink" title="Pointcut"></a>Pointcut</h2><p><img src="/2020/10/02/AOP2/pointcut.png" alt="Poingcut部分继承图"></p>
<p>其中最常使用的就是JdkRegexpMethodPointcut，根据一组表达式来匹配切入点</p>
<h2 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h2><p><img src="/2020/10/02/AOP2/advice.png" alt="Advice部分继承图"></p>
<p>需要为自己定义的增强实现这几种接口</p>
<h2 id="Aspect"><a href="#Aspect" class="headerlink" title="Aspect"></a>Aspect</h2><p>在基于API实现的AOP中，用Advisor表示Aspect</p>
<p><img src="/2020/10/02/AOP2/Advisor.png" alt="Advisor部分继承图"></p>
<p>其中最常用的是PointcutAdvisor接口的DefaultPointcutAdvisor实现类，它可以通过任意Pointcut和Advice定义一个切面</p>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>在Spring AOP中，根据一次创建代理的个数，可以分为创建单个代理的织入器和创建多个代理的织入器（即自动代理）。</p>
<p>Spring AOP中创建单个代理的织入器的类有：</p>
<ul>
<li>ProxyFactory</li>
<li>ProxyFactoryBean</li>
<li>AspectJProxyFactory</li>
</ul>
<p><img src="/2020/10/02/AOP2/singleproxy.png" alt="singleProxy"></p>
<p>默认情况下，SpringAOP会使用动态代理基于接口生成代理对象，当出现下列情况会使用CGLIB基于类生成代理对象。</p>
<ul>
<li>目标类没有实现任何接口</li>
<li>ProxyFactory的proxyTargetClass属性值被设置为true</li>
<li>ProxyFactory的optimize属性值被设置为true</li>
</ul>
<p>常用的自动代理类：</p>
<ul>
<li>BeanNameAutoProxyCreator</li>
<li>DefaultAdvisorAutoProxyCreator</li>
<li>AnnotationAwareAspectJAutoProxyCreator</li>
</ul>
<p><img src="/2020/10/02/AOP2/singleproxy.png" alt="autoProxy"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public interface Service &#123;<br>   	public void service();<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class ServiceClass implements Service&#123;<br>    public void service()&#123;<br>        System.out.println(&quot;service&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class MyAspect implements MethodBeforeAdvice, AfterReturningAdvice &#123;<br>    @Override<br>&#x2F;&#x2F;    method是被调用的方法，objects是方法参数，o是被调用方法所属的对象<br>    public void before(Method method, Object[] objects, Object o) throws Throwable &#123;<br>        System.out.println(method.getName()+&quot; &quot;+&quot;service&quot;);<br>        System.out.println(Arrays.toString(objects));<br>        System.out.println(o.getClass().getName());<br>        System.out.println(&quot;--------&quot;);<br>        System.out.println(&quot;before&quot;);<br>        System.out.println(&quot;--------&quot;);<br>    &#125;<br><br>    &#x2F;&#x2F;o是返回值<br>    @Override<br>    public void afterReturning(Object o, Method method, Object[] objects, Object o1) throws Throwable &#123;<br>        System.out.println(&quot;------&quot;);<br>        System.out.println(&quot;after&quot; + o);<br>        System.out.println(&quot;------&quot;);<br>    &#125;<br><br>&#125;<br><br>public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        Service service &#x3D; (Service)new ClassPathXmlApplicationContext(&quot;ApiContext.xml&quot;).getBean(&quot;proxy&quot;);<br>        service.service();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>xml文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;<br>       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;<br>       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;<br>    &lt;bean id&#x3D;&quot;myAspect&quot; class&#x3D;&quot;APIAOP.MyAspect&quot;&gt;&lt;&#x2F;bean&gt;<br>    &lt;bean id&#x3D;&quot;serviceClass&quot; class&#x3D;&quot;APIAOP.ServiceClass&quot;&gt;&lt;&#x2F;bean&gt;<br>    &lt;bean id&#x3D;&quot;pointcut&quot; class&#x3D;&quot;org.springframework.aop.support.JdkRegexpMethodPointcut&quot;&gt;<br>        &lt;property name&#x3D;&quot;pattern&quot; value&#x3D;&quot;.*service&quot;&gt;&lt;&#x2F;property&gt;<br>    &lt;&#x2F;bean&gt;<br>    &lt;bean id&#x3D;&quot;aspect&quot; class&#x3D;&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;&gt;<br>        &lt;property name&#x3D;&quot;pointcut&quot; ref&#x3D;&quot;pointcut&quot;&gt;&lt;&#x2F;property&gt;<br>        &lt;property name&#x3D;&quot;advice&quot; ref&#x3D;&quot;myAspect&quot;&gt;&lt;&#x2F;property&gt;<br>    &lt;&#x2F;bean&gt;<br>    &lt;bean id&#x3D;&quot;proxy&quot; class&#x3D;&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;<br>        &lt;property name&#x3D;&quot;target&quot; ref&#x3D;&quot;serviceClass&quot;&gt;&lt;&#x2F;property&gt;<br>        &lt;property name&#x3D;&quot;interceptorNames&quot; value&#x3D;&quot;myAspect&quot;&#x2F;&gt;<br>        &lt;property name&#x3D;&quot;proxyInterfaces&quot; value&#x3D;&quot;APIAOP.Service&quot;&#x2F;&gt;<br>    &lt;&#x2F;bean&gt;<br>&lt;&#x2F;beans&gt;<br></code></pre></td></tr></table></figure>

<h1 id="Spring中的AOP的实现原理"><a href="#Spring中的AOP的实现原理" class="headerlink" title="Spring中的AOP的实现原理"></a>Spring中的AOP的实现原理</h1><ul>
<li>JDK动态代理</li>
</ul>
<p>JDK动态代理通过“反射”来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。</p>
<ul>
<li>Cglib动态代理</li>
</ul>
<p>JDK动态代理必须要有接口, 但如果要代理一个没有接口的类该怎么办呢? CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态地生成某个类的子类。注意，CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。CGLIB动态代理的原理是生成目标类的子类,这个子类对象就是代理对象, 代理对象是被增强过的。</p>
<h2 id="JDK的动态代理"><a href="#JDK的动态代理" class="headerlink" title="JDK的动态代理"></a>JDK的动态代理</h2><p>JDK的动态代理需要了解一个接口和一个类，JDK动态代理的核心是InvocationHandler接口和Proxy类</p>
<h3 id="Proxy类"><a href="#Proxy类" class="headerlink" title="Proxy类"></a>Proxy类</h3><p>Proxy是一个代理类，其中只有一个newProxyInstance方法</p>
<pre><code>public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code></pre>
<p>这个方法返回一个代理实例，其中的参数：</p>
<ul>
<li><p>ClassLoader loader为类加载器，加载类的字节码</p>
</li>
<li><p>Class&lt;?&gt;[] interfaces指定生成的代理对象必须实现的接口（因为被代理对象与代理对象应实现相同的接口）</p>
</li>
<li><p>InvocationHandler h </p>
</li>
</ul>
<h3 id="InvocationHandler接口"><a href="#InvocationHandler接口" class="headerlink" title="InvocationHandler接口"></a>InvocationHandler接口</h3><p>InvocationHandler接口：代理类的方法被外界调用之后，将方法交给InvocationHandler，由它来实现对方法的增强</p>
<p>InvocationHandler接口只有一个invoke方法，由invoke方法实现对被代理方法的增强</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public Object invoke(Object proxy,Method method,Object[] args)<br></code></pre></td></tr></table></figure>
<p>其中的参数：</p>
<ul>
<li><p>Object proxy：代理对象实例</p>
</li>
<li><p>Method method：外界调用的方法</p>
</li>
<li><p>Object[] args：方法的参数</p>
</li>
</ul>
<p>我们发现，在invoke方法中没有找到我们想要的被代理对象，那我们在实现InvocationHandler接口的代理类中，一定要声明一个被代理对象的属性</p>
<p>定义一个User接口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public interface User &#123;<br>    void use();<br>&#125;<br></code></pre></td></tr></table></figure>
<p>定义接口的实现类UserImpl</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class UserImpl implements User&#123;<br>    @Override<br>    public void use() &#123;<br>        System.out.println(&quot;user using&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>定义动态代理类MyJdkAspect：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class MyJdkAspect implements InvocationHandler &#123;<br>&#x2F;&#x2F;被代理对象<br>   private Object target;<br><br>   public MyJdkAspect()&#123;&#125;<br><br>   public MyJdkAspect(Object target)&#123;<br>       this.target &#x3D; target;<br>   &#125;<br><br>   @Override<br>   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;<br>        Object object &#x3D; null;<br>        System.out.println(&quot;before&quot;);<br>	&#x2F;&#x2F;        通过反射调用目标对象的方法<br>        object &#x3D; method.invoke(target,args);<br>        System.out.println(&quot;after&quot;);<br>        return object;<br>   	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>   public static void main(String[] args) &#123;<br>       User user &#x3D; new UserImpl();<br>       MyJdkAspect myJdkAspect &#x3D; new MyJdkAspect(user);<br>&#x2F;&#x2F;        创建代理实例<br>        User proxy &#x3D; (User) Proxy.newProxyInstance(user.getClass().getClassLoader(),user.getClass().getInterfaces(),myJdkAspect);<br>&#x2F;&#x2F;        代理对象proxy调用use方法时会自动调用invoke方法，实现增强<br>        proxy.use();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<p>before<br>user using<br>after</p>
<p><a href="https://blog.csdn.net/jiankunking/article/details/52143504?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160166897019195240408337%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=160166897019195240408337&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-9-52143504.pc_first_rank_v2_rank_v28&utm_term=aop+jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86&spm=1018.2118.3001.4187#%E4%BA%8C%E3%80%81Java%20%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%B1%BB%C2%A0">参考链接</a></p>
<h2 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h2><p>使用cglib动态代理需要实现MethodInterceptor接口</p>
<p>MethodInterceptor接口中有一个intercept方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public Object intercept(Object object, java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable;<br></code></pre></td></tr></table></figure>
<p>Object object 是代理对象</p>
<p>Method method 是拦截方法</p>
<p>Object[] args 是方法参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class NewUserImpl &#123;<br>   	public void use()&#123;<br>       	System.out.println(&quot;user using&quot;);<br>   	&#125;<br>&#125;<br><br>public class MyCglibProxy implements MethodInterceptor &#123;<br>	&#x2F;&#x2F;被代理的目标对象<br>    private Object target;<br>&#x2F;&#x2F;  生成代理类<br>    public Object creatProxyInstance(Object target)&#123;<br>        this.target &#x3D; target;<br>        Enhancer enhancer &#x3D; new Enhancer();<br>        enhancer.setSuperclass(this.target.getClass());<br>        enhancer.setCallback(this);<br>        return enhancer.create();<br>    &#125;<br><br>    &#x2F;&#x2F;重写拦截方法<br>    @Override<br>    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;<br>        Object object &#x3D; null;<br>        System.out.println(&quot;before&quot;);<br>        object &#x3D; methodProxy.invoke(target,objects);<br>        System.out.println(&quot;after&quot;);<br>        return object;<br>    &#125;<br>&#125;<br><br><br>public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        NewUserImpl newUser &#x3D; new NewUserImpl();<br>        NewUserImpl user &#x3D; (NewUserImpl) new MyCglibProxy().creatProxyInstance(newUser);<br>        user.use();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>AOP</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之Stream流</title>
    <url>/2020/09/22/JavaStream/</url>
    <content><![CDATA[<p>今天在写java实验的过程中，想用Stream流省事时，却发现自己对Stream流有点生疏了，所以特地翻开以前写的Stream流的demo记录下来，以便加深印象。</p>
<blockquote>
</blockquote>
<h2 id="一-什么是Java-Stream流"><a href="#一-什么是Java-Stream流" class="headerlink" title="一.什么是Java Stream流"></a><strong><em>一.什么是Java Stream流</em></strong></h2><p>Stream流是java8 API中添加的一个新的抽象，它使用一种类似SQL语句从数据库查询数据的直观方式来提供一种对Java集合运算和表达的抽象。</p>
<p>它将要处理的元素集合看作一种流，流在管道中传输，并且可以在管道上进行对集合的处理，比如对集合就行筛选过滤、排序（自定义或是默认）、聚合等操作。</p>
<p>Stream流的处理中，元素在管道中经过中间操作的处理，最后由最终操作得到前面处理的结果。</p>
<blockquote>
</blockquote>
<h2 id="二-Stream流的特点"><a href="#二-Stream流的特点" class="headerlink" title="二.Stream流的特点"></a><strong><em>二.Stream流的特点</em></strong></h2><p>1.Stream流不是数据结构，它不会保存数据，流可以是一个泛型。</p>
<p>2.可以对集合、数组进行连续的操作。</p>
<p>3.Stream流的数据源可以有集合、数组等。</p>
<p>4.它不会修改原来的数据源，它会将操作后的数据保存到另外一个对象中。</p>
<p>5.Stream是惰性求值，流在中间处理过程中，只是对操作进行了记录，并不会立即执行，需要等到执行终止操作的时候才会进行实际的计算。</p>
<blockquote>
</blockquote>
<h2 id="三-为什么要使用Stream流"><a href="#三-为什么要使用Stream流" class="headerlink" title="三.为什么要使用Stream流"></a><strong><em>三.为什么要使用Stream流</em></strong></h2><p>Stream API 可以极大提高程序员的生产力，让程序员以一种声明的方式处理数据，一行代码对集合进行多种操作，让我们写出更高效、简洁、有效率的代码。</p>
<blockquote>
</blockquote>
<h2 id="四-Stream流的用法"><a href="#四-Stream流的用法" class="headerlink" title="四.Stream流的用法"></a><strong><em>四.Stream流的用法</em></strong></h2><p><strong>另外，在使用流的时候，先不要重复使用同一个流，后面会讲到原因</strong></p>
<h3 id="1-流的创建"><a href="#1-流的创建" class="headerlink" title="1.流的创建"></a><strong>1.流的创建</strong></h3><p>对于集合，流的创建通常使用 集合.stream() 来创建一个流，如：</p>
<pre><code>List&lt;String&gt; list = new ArrayList&lt;&gt;();
Stream&lt;String&gt; stream = list.stream();</code></pre>
<p>对于数组，通常使用集合的工具类 Arrays.stream() 、将数组转换为集合List 又或是Stream.of(array) 来创建一个流，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">String[] strs &#x3D; new String[10];<br>Stream&lt;String&gt; stream &#x3D; Arrays.stream(strs);<br><br>Stream&lt;String&gt; stream &#x3D; Arrays.asList(strs).stream();<br><br>Stream&lt;String&gt; stream &#x3D; Stream.of(1,2,3,4,6);<br></code></pre></td></tr></table></figure>
<p>将字符串分隔成流：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">String newstr &#x3D; &quot;123,456,789&quot;;<br>   Pattern pattern &#x3D; Pattern.compile(&quot;,&quot;);<br>   Stream&lt;String&gt; spiltStream &#x3D; pattern.splitAsStream(newstr);<br>   splitStream.sorted.forEach(v-&gt;System.out.println(v));			&#x2F;&#x2F; 输出：123 456 789 <br></code></pre></td></tr></table></figure>

<hr>
<h3 id="2-流的中间操作"><a href="#2-流的中间操作" class="headerlink" title="2.流的中间操作"></a><strong>2.流的中间操作</strong></h3><p>定义一个整形数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Integer[] integers &#x3D; &#123;1,23,4,5,6,7,3,3,23,6,8,93,2,4,5&#125;;<br></code></pre></td></tr></table></figure>
<p>以下流的操作均以此数组为例</p>
<p><strong>forEach循环：</strong></p>
<p>使用forEach()方法可以循环输出流</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Stream.of(integers).forEach(v-&gt;System.out.println(v)); &#x2F;&#x2F; 循环输出整形数组<br></code></pre></td></tr></table></figure>
<p><strong>筛选：</strong></p>
<p>使用Stream流中的filter()方法可以过滤某些元素，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Stream&lt;Integer&gt; stream1 &#x3D; Stream.of(integers);<br>stream1.filter(v-&gt;v&gt;20).forEach(v-&gt;System.out.println(v));	&#x2F;&#x2F;23,23,93<br></code></pre></td></tr></table></figure>
<p><strong>获取n个元素：</strong></p>
<p>使用limit(n)方法可以获取流中n个元素，顺序为从 0 – n-1，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Stream.of(integers).limit(5).forEach(v-&gt;System.out.println(v));	&#x2F;&#x2F;1,23,4,5,6<br></code></pre></td></tr></table></figure>
<p><strong>跳过前n个元素</strong></p>
<p>使用skip(n)方法可以跳过流中前n个元素，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Stream.of(integers).skip(7).forEach(v-&gt;System.out.println(v));	&#x2F;&#x2F;8,93,2,4,5<br></code></pre></td></tr></table></figure>
<p><strong>去除重复元素</strong></p>
<p>使用distinct()方法可以去除流中重复元素（使用hashcode（）和equals（）实现）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Stream.of(integers).distinct().forEach(v-&gt;System.out.println(v));	&#x2F;&#x2F;1,23,4,5,6,7,3,8,93,2<br></code></pre></td></tr></table></figure>
<p><strong>生成映射</strong></p>
<p>map()方法接受一个lambda表达式，该函数会被应用到每个元素上，并映射成一个新的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Stream.of(integers).filter(i-&gt;i&gt;20).distinct().map(v-&gt;v*&#x3D;2).forEach(v-&gt;System.out.println(v));		&#x2F;&#x2F;46,186<br></code></pre></td></tr></table></figure>
<p><strong>排序</strong></p>
<p>sorted()方法可以进行默认排序，流中元素需要实s现Comparable接口</p>
<p>sorted(Comparator cmp) 方法中传入一个实现Comparator接口的实现类，可以实现自定义排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Stream.of(integers).sorted().filter(i-&gt;i&gt;20).forEach(v-&gt;System.out.println(v)) 		&#x2F;&#x2F; 23,23,93<br><br>Stream.of(integers).sorted(<br>		new Comparator&lt;Integer&gt;() &#123;<br>           public int compare(Integer o1, Integer o2) &#123;<br>               return o2-o1;<br>           &#125;<br>       &#125;<br>	).filter(i-&gt;i&gt;20).forEach(v-&gt;System.out.println(v))	&#x2F;&#x2F; 93,23,23<br></code></pre></td></tr></table></figure>

<p><strong>消费方法</strong></p>
<p><del>待续</del></p>
<hr>
<h3 id="3-流的终止操作"><a href="#3-流的终止操作" class="headerlink" title="3.流的终止操作"></a><strong>3.流的终止操作</strong></h3><p><strong>前面说过不要重复使用一个流，因为流的终止操作会将流关闭，关闭流后就不能继续使用这个流，如果继续使用流则会出现异常</strong></p>
<p>流的终止操作有：匹配、聚合、收集</p>
<hr>
<p><strong>匹配</strong></p>
<p>匹配操作是判断元素在流中的存在关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Stream&lt;Integer&gt; stream &#x3D; Stream.of(integers);<br>boolean bool1 &#x3D; stream.allMatch(v-&gt;v&gt;5);	&#x2F;&#x2F;false<br>boolean bool2 &#x3D; stream.allMatch(v-&gt;v&gt;10);	&#x2F;&#x2F;此时会出现异常，因为执行了流的终止操作。<br><br>boolean allMatch &#x3D; Stream.of(integers).allMatch(v-&gt;v&gt;5);<br>   System.out.println(allMatch);	&#x2F;&#x2F;判断流中所有元素是否符合某种关系<br><br>   boolean nonMatch &#x3D; Stream.of(integers).noneMatch(v-&gt;v&gt;100);<br>   System.out.println(nonMatch);	&#x2F;&#x2F;判断流中所有元素是否不符合某种关系<br><br>   boolean anyMatch &#x3D; Stream.of(integers).anyMatch(v-&gt;v&gt;90);<br>   System.out.println(anyMatch);	&#x2F;&#x2F;判断是否有元素符合<br><br>   int res &#x3D; Stream.of(integers).findFirst().get();<br>   System.out.println(res);		&#x2F;&#x2F;返回流中第一个元素<br><br>   int any &#x3D; Stream.of(integers).findAny().get();<br>   System.out.println(any);		&#x2F;&#x2F;随机返回一个元素<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>聚合</strong></p>
<p>聚合操作有：返回流中元素个数、最大值、最小值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">long count &#x3D; Stream.of(integers).count();	&#x2F;&#x2F;返回long型<br><br>int maxElement &#x3D; Stream.of(integers).max(Integer::compareTo).get();<br><br>int minElement &#x3D; Stream.of(integers).min(Integer::compareTo).get();<br><br></code></pre></td></tr></table></figure>
<hr>
<p><strong>收集</strong></p>
<p>收集操作可以将流中的元素包装成一个最终结果集：List、map、set等，如：</p>
<p>其中 collect 接受一个Collector实例，可将元素收集成另外一个数据结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Set&lt;Integer&gt; set &#x3D; Stream.of(integers).collect(Collectors.toSet());	&#x2F;&#x2F;[1, 2, 3, 4, 5, 6, 23, 7, 8, 93]<br><br>List&lt;Integer&gt; list &#x3D; Stream.of(integers).collect(Collectors.toList());		&#x2F;&#x2F;[1, 23, 4, 5, 6, 7, 3, 3, 23, 6, 8, 93, 2, 4, 5]<br><br>Map&lt;Integer,Integer&gt; map &#x3D; Stream.of(integers).distinct().filter(v-&gt;v&gt;20).collect(Collectors.toMap(Integer::intValue,Integer::intValue));	&#x2F;&#x2F;&#123;23&#x3D;23, 93&#x3D;93&#125;<br></code></pre></td></tr></table></figure>
<p>收集操作中求最大、最小、求和、平均值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">int max &#x3D; Stream.of(integers).collect(Collectors.maxBy(Integer::compare)).get();<br><br>int min &#x3D; Stream.of(integers).collect(Collectors.minBy(Integer::compare)).get();<br><br>double average &#x3D; Stream.of(integers).collect(Collectors.averagingDouble(Integer::intValue));<br><br>int sum &#x3D; Stream.of(integers).collect(Collectors.summingInt(Integer::intValue));<br></code></pre></td></tr></table></figure>
<p>以下方法可以集以上四种操作于一身：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">IntSummaryStatistics sta &#x3D; Stream.of(integers).collect(Collectors.summarizingInt(Integer::intValue));<br>int max &#x3D; sta.getMax();<br>int min &#x3D; sta.getMin();<br>double average &#x3D; sta.getAverage();<br>long count &#x3D; sta.getCount();<br>long sum &#x3D; sta.getSum();<br></code></pre></td></tr></table></figure>


<hr>
<p><strong>分组</strong></p>
<p>分组操作将流中相同元素归为一组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Map&lt;Integer,List&lt;Integer&gt;&gt; map &#x3D; Stream.of(integers).distinct().collect(Collectors.groupingBy(Integer::intValue));		&#x2F;&#x2F;&#123;1&#x3D;[1], 2&#x3D;[2], 3&#x3D;[3], 4&#x3D;[4], 5&#x3D;[5], 6&#x3D;[6], 7&#x3D;[7], 23&#x3D;[23], 8&#x3D;[8], 93&#x3D;[93]&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>分区</strong></p>
<p>分区操作中，设置条件将流中元素分成两组，满足条件的为true，不满足的为false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Map&lt;Boolean,List&lt;Integer&gt;&gt; newmap &#x3D; Stream.of(integers).distinct().collect(Collectors.partitioningBy(v-&gt;v&gt;20));<br><br>       System.out.println(newmap);<br><br>       System.out.println(newmap.get(true));<br></code></pre></td></tr></table></figure>
<p>使用newmap.get(true)访问满足条件的元素。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>JavaStream流</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown入门</title>
    <url>/2020/09/21/MarkDown/</url>
    <content><![CDATA[<p>MarkDown 是一种轻量级标记语言，它允许我们使用易读易写的纯文本格式编写文档，目前许多网站都在广泛使用MarkDown来撰写文章或是在论坛发表文章，当然个人博客中也支持使用MarkDown来撰写文章，为了更好地搭建个人博客，我们有必要使用MarkDown来帮助我们来编写格式更好的文章。</p>
<hr>
<h3 id="一-标题"><a href="#一-标题" class="headerlink" title="一.标题"></a><strong><em>一.标题</em></strong></h3><p>标题使用#号标记</p>
<p>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><p><strong>注：#后面要有空格，不然无法正确显示</strong></p>
<hr>
<h3 id="二-段落格式"><a href="#二-段落格式" class="headerlink" title="二.段落格式"></a><strong><em>二.段落格式</em></strong></h3><p>MarkDown可以使用三种字体：斜体、加粗、斜体加粗。</p>
<p>斜体：在文字两端各加一个*</p>
<p><em>这是斜体</em></p>
<p>粗体：在文字两端各加两个*</p>
<p><strong>这是粗体</strong></p>
<p>斜体加粗：在文字两端各加三个***</p>
<p><strong><em>这是斜体加粗</em></strong></p>
<hr>
<p>分割线使用 — 来建立分割线</p>
<hr>
<p>文字两端使用 ～～ 来使文字变成删除格式</p>
<p><del>这是文字的删除格式</del></p>
<p><strong>注：～～必须是英文的～</strong></p>
<hr>
<p>下划线是通过html的 u 标签来实现的，在文字两端加上即可</p>
<p><u>这是下划线</u></p>
<hr>
<h3 id="三-列表"><a href="#三-列表" class="headerlink" title="三.列表"></a><strong><em>三.列表</em></strong></h3><p>列表分为 <u>有序列表</u> 和 <u>无序列表</u></p>
<p><strong>无序列表</strong>使用 *、+、- 作为列表标记</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<p><strong>有序列表</strong>使用 1. 2. 3.标记</p>
<p>1.第一项<br>2.第二项<br>3.第三项</p>
<p><strong><em>列表嵌套</em></strong></p>
<p>第二层为第一层换行后加一个tab</p>
<ul>
<li>第一层<ul>
<li>第二层<ul>
<li>第三层 <ul>
<li>第四层</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p><strong><em>区块引用和嵌套</em></strong></p>
<p>区块引用：在段落开头使用 &gt; 符号，后面跟一个空格</p>
<blockquote>
<p>这是区块一</p>
</blockquote>
<blockquote>
<p>这是区块二</p>
</blockquote>
<p>区块嵌套：一个&gt;是最外层，两个是第一层嵌套，以此类推</p>
<blockquote>
<p>父亲</p>
<blockquote>
<p>儿子</p>
<blockquote>
<p>孙子</p>
</blockquote>
</blockquote>
</blockquote>
<p><strong><em>注：区块嵌套中&gt;也要隔一个空格</em></strong></p>
<hr>
<h3 id="四-链接和图片"><a href="#四-链接和图片" class="headerlink" title="四.链接和图片"></a><strong><em>四.链接和图片</em></strong></h3><p>链接使用：<a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接名称</a></p>
<p>如：<a href="https://zleo-bug.github.io/">zleo的博客</a>    </p>
<p>图片使用：图片的使用和链接使用一样</p>
<p>如：<a href="http://static.runoob.com/images/runoob-logo.png">菜鸟教程</a></p>
<p>若使用本地图片，则链接为 在与本md文件同名的文件夹中的图片名称，本文的文件名为MarkDown，则链接为MarkDown图片的名称</p>
<p><img src="/2020/09/21/MarkDown/f4131bc77889e084f2b3648261cc43df.jpg" alt="图片"></p>
<p>MarkDown还不支持指定图片的高度和大小，若有需要可以使用html的img标签</p>
<hr>
<h3 id="五-表格"><a href="#五-表格" class="headerlink" title="五.表格"></a><strong><em>五.表格</em></strong></h3><p>MarkDown中用|分隔不同单元格，用-来分隔表头和其他行</p>
<p>如：</p>
<table>
<thead>
<tr>
<th>表头&emsp;</th>
<th>表头&emsp;</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td>内容</td>
<td>内容</td>
</tr>
</tbody></table>
<br>
表格中默认为向左看齐

<p>向右看齐：右边加 :</p>
<p>文字居中：两边加 :</p>
<p><strong><em>注：&amp;emsp; 表示两个空格</em></strong></p>
<hr>
<h3 id="六-代码块"><a href="#六-代码块" class="headerlink" title="六.代码块"></a><strong><em>六.代码块</em></strong></h3><p>如果是段落上的一个函数或者是片段代码可以用反引号包起来</p>
<p>如：<code>printf()</code> 函数</p>
<p>如果是一个代码块，则在代码块前后加反引号即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">#include&lt;stdio.h&gt;<br>#include&lt;iostream&gt;<br>using namespace std;<br></code></pre></td></tr></table></figure>
<hr>
<h3 id="以上就是MarkDown的基本语法。"><a href="#以上就是MarkDown的基本语法。" class="headerlink" title="以上就是MarkDown的基本语法。"></a>以上就是MarkDown的基本语法。</h3>]]></content>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博文</title>
    <url>/2020/09/21/NewPassage/</url>
    <content><![CDATA[<p>这是我的第一篇博文，以后要把学习过程中的知识点写在自己的博客上😎</p>
]]></content>
  </entry>
  <entry>
    <title>Python入门学习</title>
    <url>/2020/09/21/Python/</url>
    <content><![CDATA[<p>这学期选修了信息检索（python基础入门），所以有必要将python的基础markdown，便于以后学习。语言都具有相似性，下面列举出python与其他语言不同的地方</p>
<h1 id="一-什么是python："><a href="#一-什么是python：" class="headerlink" title="一.什么是python："></a>一.什么是python：</h1><p>python是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p>
<p>python语言是一种解释性语言：这意味着在代码编写、执行过程中没有了编译这个环节</p>
<h1 id="二-python基础："><a href="#二-python基础：" class="headerlink" title="二.python基础："></a>二.python基础：</h1><h2 id="语句结束符："><a href="#语句结束符：" class="headerlink" title="语句结束符："></a>语句结束符：</h2><p>python中可以不写结束符； 如：print(val)    </p>
<h2 id="变量定义与删除："><a href="#变量定义与删除：" class="headerlink" title="变量定义与删除："></a>变量定义与删除：</h2><p>python中变量类型是弱类型，定义变量时不用声明数据类型，可以用del删除变量</p>
<h2 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h2><h2 id="行与缩进："><a href="#行与缩进：" class="headerlink" title="行与缩进："></a>行与缩进：</h2><p>行与缩进是python语言最具特色的一个地方，python不像其他语言一样使用大括号来包含一个代码块，而是使用：来包含代码块，缩进相同的代码块为同一层次。</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">if True:<br>		print(&quot;True&quot;);<br>	else:<br>		print(&quot;False&quot;);<br></code></pre></td></tr></table></figure>

<h2 id="多行语句："><a href="#多行语句：" class="headerlink" title="多行语句："></a>多行语句：</h2><p>如果一行代码很长，可以用 \ 来将代码分行<br>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">total &#x3D; item_one + \<br>      item_two + \<br>      item_three<br></code></pre></td></tr></table></figure>
<h2 id="导入模块："><a href="#导入模块：" class="headerlink" title="导入模块："></a>导入模块：</h2><p>python中导入模块使用 import [somemoudle] 和 from [somemoudle] import [moudle1],[moudle2]…导入模块，使用import可以导入其他python文件，作用类似于java中的包，导入其他文件后会自动运行文件中的代码，解决方法是在主文件中将代码块放入 <strong>name</strong> == <strong>main</strong> </p>
<h2 id="输入与输出："><a href="#输入与输出：" class="headerlink" title="输入与输出："></a>输入与输出：</h2><p>python中用 input(“”)语句输入，输入默认为字符串，若想将输入转换为其他类型的值可用强制转换。如 val = int(input(“enter a val:”))</p>
<p>python中用 print()语句输出，输出默认换行，若想取消换行，可以使用这种形式：print(“”,end=” “) 但end这个语法只有最新版本的python3才支持。</p>
<p>也可以使用str.format()来格式化输出</p>
<p>条件控制：</p>
<p>python中没有switch case表达式，elif代替了else，还添加了for else、while else的表达式</p>
<h2 id="错误和异常："><a href="#错误和异常：" class="headerlink" title="错误和异常："></a>错误和异常：</h2><p>python中使用 try-expect-finally 代替 try-catch-else-finally，其中else是没有异常执行的代码</p>
<p>用raise代替throw抛出异常</p>
<h2 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h2><p>python支持多继承</p>
<h2 id="运算符："><a href="#运算符：" class="headerlink" title="运算符："></a>运算符：</h2><p>python中运算符除了 比较运算符、位运算符、赋值运算符 外 其他运算符和其他语言有所不同。</p>
<h3 id="算数运算符："><a href="#算数运算符：" class="headerlink" title="算数运算符："></a>算数运算符：</h3><p>x/y 的运算结果为浮点数 </p>
<p>x//y 的结果为向下取整的整数</p>
<p>x/<em>/</em>(val) 表示x的val次幂</p>
<h3 id="逻辑运算符："><a href="#逻辑运算符：" class="headerlink" title="逻辑运算符："></a>逻辑运算符：</h3><p>与运算符为：and</p>
<p>或运算符为：or</p>
<p>非运算符为：not</p>
<h3 id="成员运算符：在python循环中经常被用来判断指定元素是否在某序列中"><a href="#成员运算符：在python循环中经常被用来判断指定元素是否在某序列中" class="headerlink" title="成员运算符：在python循环中经常被用来判断指定元素是否在某序列中"></a>成员运算符：在python循环中经常被用来判断指定元素是否在某序列中</h3><p>in：表示某元素在指定的序列中 </p>
<p>not in：表示某元素不在指定序列中</p>
<h3 id="Python循环："><a href="#Python循环：" class="headerlink" title="Python循环："></a>Python循环：</h3><p>Python循环中通常使用range(i,j)来指定遍历的范围，range为左闭右开原则，如for(i in range(0,5)) 遍历下标为0-4</p>
<h3 id="身份运算符："><a href="#身份运算符：" class="headerlink" title="身份运算符："></a>身份运算符：</h3><p>is 或 id() ：用来表示某变量的地址，通常用来判断序列</p>
<p>== ：用来判断变量值是否相等，通常用来判断变量</p>
<p>类似于在java中，String str1 = “123”;String str2 = “123”; String str3 = new String(“123”);<br>str1 == str2 /true<br>str1 == str3 /false<br>之间的区别</p>
<h2 id="基本数据类型："><a href="#基本数据类型：" class="headerlink" title="基本数据类型："></a>基本数据类型：</h2><p>python中使用type()返回变量的类型，使用isinstance方法来判断变量是否与指定类型相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">a &#x3D; 10;<br>print(type(a))	#	&lt;class &#39;int&#39;&gt;<br>print(isinstance(a,int))	#True<br></code></pre></td></tr></table></figure>
<ul>
<li><h3 id="Number-数字类型-："><a href="#Number-数字类型-：" class="headerlink" title="Number (数字类型)："></a>Number (数字类型)：</h3></li>
</ul>
<p>python中数字类型只有int、bool、float、complex四种</p>
<p>强制转换：int（）、bool（）、float（）、complex（x,y）</p>
<ul>
<li><h3 id="String-字符串-："><a href="#String-字符串-：" class="headerlink" title="String (字符串)："></a>String (字符串)：</h3></li>
</ul>
<p>python中字符串用‘’或“”指定一个字符串，可用下标访问字符串，有正序访问和逆序访问两种方式</p>
<p>字符串运算符：</p>
<ul>
<li>运算符：重复输出<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">str &#x3D; &quot;123&quot;<br>print(str * 3) #123123123<br></code></pre></td></tr></table></figure>
[]运算符：通过索引截取字符串的子串(左闭右开)<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">str &#x3D; &quot;12312312412412&quot;<br>print(str[0:4]);<br></code></pre></td></tr></table></figure>
Python中字符串下标有两种格式，一种是常规的：0…n-1，另一种是从后面索引：-n…-1</li>
</ul>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">	str &#x3D; &quot;123456789&quot;<br>	print(str[0:9])		#123456789<br>	print(str[-9:0]) 	#123456789<br>&#96;&#96;&#96;	<br>in 和 not in 成员运算符：判断字符是否存在字符串中<br></code></pre></td></tr></table></figure>
<pre><code>str = &quot;12312312412412&quot;
print(&#39;0&#39; in str);        #False</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">r&#x2F;R运算符：将字符串中的字符转义，变成普通字符<br></code></pre></td></tr></table></figure>
<pre><code>str = r&quot;12\n312312412412&quot;
print(str)            #12\n312312412412</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">%字符串格式化运算符：<br>&#96;&#96;&#96;	<br>	str &#x3D; &quot;12312312412412&quot;<br>	print(&quot;string is %s&quot; %str)		#string is 12312312412412<br></code></pre></td></tr></table></figure>
<p>f-string 字面量格式化字符串：</p>
<p>f-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号{} 包起来，它会将变量或表达式计算后的值替换进去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">	name&#x3D;&quot;十二点前要睡觉&quot;<br>	print(f&quot;我&#123;name&#125;&quot;)		#我十二点前要睡觉<br><br>	print(f&quot;&#123;1+2&#125;&quot;) 	# 3<br>&#96;&#96;&#96;	<br>str.format()格式化：<br>&#96;&#96;&#96;	<br>	print(&#39;&#123;0&#125; 和 &#123;1&#125;&#39;.format(&#39;Google&#39;, &#39;Runoob&#39;))	#Google 和 Runoob<br><br>	print(&#39;&#123;name&#125;网址： &#123;site&#125;&#39;.format(name&#x3D;&#39;菜鸟教程&#39;, site&#x3D;&#39;www.runoob.com&#39;))	#菜鸟教程网址： www.runoob.com<br><br>	import math<br>	print(&#39;常量 PI 的值近似为 &#123;0:.3f&#125;。&#39;.format(math.pi))<br><br>	table &#x3D; &#123;&#39;Google&#39;: 1, &#39;Runoob&#39;: 2, &#39;Taobao&#39;: 3&#125;<br>	print(&#39;Runoob: &#123;0[Runoob]&#125;; Google: &#123;0[Google]&#125;; Taobao: &#123;0[Taobao]&#125;&#39;.format(table))<br></code></pre></td></tr></table></figure>
<ul>
<li><h3 id="List-列表-："><a href="#List-列表-：" class="headerlink" title="List (列表)："></a>List (列表)：</h3></li>
</ul>
<p>列表是python中最基本的数据类型，基本和数组相似，不过列表允许存在不同类型的值，列表用[]将元素包装，列表是可变的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">list &#x3D; [1,2,3,4,]<br>list &#x3D; [&quot;abc&quot;,&quot;def&quot;]<br>list &#x3D; [1,2,3,&quot;abc&quot;,&quot;def&quot;]<br></code></pre></td></tr></table></figure>
<p>列表也可以像字符串类型一样从尾部开始遍历，最后一个元素下标为-1<br>列表的截取也是[]运算符，左闭右开原则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print(list[-1])	# def<br></code></pre></td></tr></table></figure>
<p><strong>列表增加元素：</strong></p>
<p>列表中用append增加元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">list.append(1)<br>print(list)	#	[1, 2, 3, &#39;abc&#39;, &#39;def&#39;, 1]<br></code></pre></td></tr></table></figure>
<p>或者使用+运算符往列表中增加列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print(list+[1,2,3])		#[2, 3, &#39;abc&#39;, &#39;def&#39;, 1, 2, 3]<br></code></pre></td></tr></table></figure>
<p>也可以使用insert(i,x)往下标i插入元素x</p>
<p><strong>列表删除元素</strong></p>
<p>用del或删除元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">del list[0]<br>print(list)	#	[2, 3, &#39;abc&#39;, &#39;def&#39;, 1]<br></code></pre></td></tr></table></figure>
<p>用pop删除元素，默认删除并最后一个元素，也可以在pop方法中限定下标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">x &#x3D; list.pop()	#def<br>print(x)	#[2, 3, &#39;abc&#39;]<br><br>list.pop(0)<br>print(list)	#[3, &#39;abc&#39;]<br></code></pre></td></tr></table></figure>


<ul>
<li><h3 id="Tuple-元组-："><a href="#Tuple-元组-：" class="headerlink" title="Tuple (元组)："></a>Tuple (元组)：</h3></li>
</ul>
<p>元组与列表类似，元组不可修改，元组用()来声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">tuple &#x3D; (1,2,3,4,5)<br>print(tuple)	#(1, 2, 3, 4, 5)<br></code></pre></td></tr></table></figure>
<p>元组与列表很相似，不过元组中没有append添加元素方法，不过可以用+运算进行组合<br>可以用list(tuple)将元组转换为列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print(tuple+(9,8,7))	#(1, 2, 3, 4, 5, 9, 8, 7)<br></code></pre></td></tr></table></figure>

<ul>
<li><h3 id="列表推导式："><a href="#列表推导式：" class="headerlink" title="列表推导式："></a>列表推导式：</h3></li>
</ul>
<p>列表推导式很大简便了python的编程，列表推导式有那么一点像Java中的 集合.foreach(lambda) 方法，使用列表推导式可以实现一行代码实现多个操作的功能</p>
<p>生成新的列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">vec &#x3D; [1,3,5]<br>print([x*3 for x in vec])	#[3,9,15]<br>print(vec)	#[1,3,5]<br></code></pre></td></tr></table></figure>
<p>使用推导式进行筛选：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print([x for x in vec if x&gt;&#x3D;3])	#[3,5]<br></code></pre></td></tr></table></figure>
<p>推导式中使用if-else：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print([x if x%2&#x3D;&#x3D;0 else -x for x in range(1,10)])	#[-1, 2, -3, 4, -5, 6, -7, 8, -9]<br></code></pre></td></tr></table></figure>

<p>生成集合：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">vec &#x3D; [1,3,5,4,4,4,4,4]<br>print(&#123;x for x in vec&#125;)	#&#123;1, 3, 4, 5&#125;<br></code></pre></td></tr></table></figure>
<p>生成嵌套列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print([[x,x**2] for x in vec])	#[[1, 1], [3, 9], [5, 25]]<br></code></pre></td></tr></table></figure>
<p>生成字典：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print(&#123;x:x**2 for x in vec&#125;)    #&#123;1, 3, 4, 5&#125;<br></code></pre></td></tr></table></figure>
<p>推导式也可以进行对列表的反转、正序、逆序输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">vec &#x3D; [1,3,5,4,4,4,4,4]<br>print([x for x in reversed(vec)])	#[4, 4, 4, 4, 4, 5, 3, 1]<br>print([x for x in sorted(vec)]) #[1, 3, 4, 4, 4, 4, 4, 5]<br>print([x for x in reversed(sorted(vec))]) #[5, 4, 4, 4, 4, 4, 3, 1]<br></code></pre></td></tr></table></figure>



<ul>
<li><h3 id="set-集合-："><a href="#set-集合-：" class="headerlink" title="set (集合)："></a>set (集合)：</h3></li>
</ul>
<p>集合是无序的，集合使用{}或set()函数创建集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">set &#x3D; &#123;1,2,3,4,5,6&#125;<br>print(set)		#&#123;1, 2, 3, 4, 5, 6&#125;<br>print(set(&quot;123321&quot;))	#&#123;&#39;1&#39;, &#39;3&#39;, &#39;2&#39;&#125;<br></code></pre></td></tr></table></figure>
<p>添加元素：</p>
<p>用add方法往集合添加一个元素，也可以用update添加集合、元组、列表等    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">set.add(4)<br>print(set)	#&#123;&#39;3&#39;, &#39;2&#39;, 4, &#39;1&#39;&#125;<br><br>set.update(&#123;5&#125;)	#&#123;&#39;2&#39;, 4, 5, &#39;3&#39;, &#39;1&#39;&#125;<br>print(set)<br></code></pre></td></tr></table></figure>
<p>删除元素：</p>
<p>用remove方法删除元素，但是如果集合中不存在元素会报错</p>
<p>用discard方法删除元素，如果集合不存在元素也不会报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">set.discard(5)<br>print(set)		#&#123;4, &#39;3&#39;, &#39;2&#39;, &#39;1&#39;&#125;<br></code></pre></td></tr></table></figure>
<p>集合并交差补运算</p>
<p>set1|set2: 并集<br>set1&amp;set2: 交集<br>set1-set2: 差集<br>set1^set2: 不同时属于set1和set2的</p>
<ul>
<li><h3 id="Dictionary-字典-："><a href="#Dictionary-字典-：" class="headerlink" title="Dictionary (字典)："></a>Dictionary (字典)：</h3></li>
</ul>
<p>python中字典用{}声明，键值对用:分隔，用{}声明空字典，字典值可修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">dict &#x3D; &#123;&quot;1&quot;:1,&quot;2&quot;:2&#125;<br>print(dict)	&#123;&#39;1&#39;: 1, &#39;2&#39;: 2&#125;<br>print(dict[&quot;1&quot;])	# 1<br><br>dict[&quot;1&quot;] &#x3D; 100<br>print(dict)	#&#123;&#39;1&#39;: 100, &#39;2&#39;: 2&#125;<br></code></pre></td></tr></table></figure>
<p>字典中用update增加一个键值对</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">dict.update(&#123;&quot;3&quot;:3&#125;)<br>print(dict)<br></code></pre></td></tr></table></figure>
<p>pop(key)删除键为key的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">val &#x3D; dict.pop(&quot;1&quot;)<br>print(val)	#100<br></code></pre></td></tr></table></figure>
<p>用popitem删除并返回最后一个键值对</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">d &#x3D; dict.popitem();<br>print(d)	#(&#39;3&#39;, 3)<br></code></pre></td></tr></table></figure>
<h2 id="python函数"><a href="#python函数" class="headerlink" title="python函数"></a>python函数</h2><p>python中用def定义一个函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">def Method():<br>   print(&quot;难顶&quot;)<br>Method()	#难顶<br></code></pre></td></tr></table></figure>

<p><strong>函数参数：</strong></p>
<p>函数参数中值得注意的是 <strong>关键字参数</strong> 、<strong>默认参数</strong> 、<strong>不定长参数</strong>、<strong>匿名函数</strong></p>
<p><strong>关键字参数</strong><br>函数调用可以使用关键字参数来确定传入的参数值，使用关键字参数时允许参数顺序的不一致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">def Method(name, age):<br>   print(name, age)<br><br>Method(age&#x3D;21, name&#x3D;&quot;zl&quot;)		#zl 21<br></code></pre></td></tr></table></figure>
<p><strong>默认参数</strong><br>函数中可以对参数设置默认值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">def Method(name,age,address&#x3D;&quot;guangdong&quot;):<br>   print(name, age,address)	#zl 21 guangdong<br>Method(age&#x3D;21, name&#x3D;&quot;zl&quot;)<br></code></pre></td></tr></table></figure>
<p><strong>不定长参数</strong><br>不定长参数中，用*导入一个元组，**导入一个字典</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">def Method(*tuple):<br>   print(tuple)<br>Method(1,2,3,4,5,6,7)	#(1, 2, 3, 4, 5, 6, 7)<br><br>def Method(**dict):<br>   print(dict)<br>Method(a&#x3D;1,b&#x3D;2,c&#x3D;3,d&#x3D;4);	#&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;<br></code></pre></td></tr></table></figure>
<p>不定长参数后的参数要以关键字参数的形式传入</p>
<p><strong>匿名函数</strong><br>匿名函数中用lambda表达式创建一个匿名函数，表达式中会提供返回值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Method &#x3D; lambda val1&#x3D;1,val2&#x3D;2:val1+val2<br>print(Method())<br></code></pre></td></tr></table></figure>

<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>python类中不用像c++、java中声明属性，可以直接在构造方法def <strong>init</strong>(self)使用，属性或方法前加__代表私有，另外，在类中的任何方法都要在参数列表第一个加上self，类似c++、java的this关键字，在方法中调用属性时要使用self.的方式，而且新建对象不用使用new关键字，Aclass=Myclass()即可，继承则使用Aclass(Bclass)声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">class person:<br>    name &#x3D; &quot; &quot;<br>    age &#x3D; 0<br>    sex &#x3D; &quot; &quot;<br><br>   def __init__(self, name, age, sex):<br>       self.name &#x3D; name<br>       self.age &#x3D; age<br>       self.sex &#x3D; sex<br><br>   def show(self):<br>       return (&quot;&#123;0&#125; is a &#123;1&#125; years old &#123;2&#125;&quot;.format(self.name, self.age, self.sex))<br><br>class student(person):<br>   grade &#x3D; &quot; &quot;<br><br>   def __init__(self, name, age, sex, grade):<br>       person.__init__(self, name, age, sex)<br>       self.grade &#x3D; grade<br><br>   def show(self):<br>       return person.show(self) + &quot; 大学 &#123;&#125; 年级&quot;.format(self.grade)<br><br>   def print(self):<br>       print(person.show(self))<br>       print(super().show())<br><br><br>class graduate(student, person):<br>   	salary &#x3D; 0<br><br>   def __init__(self, name, age, sex, grade, salary):<br>       student.__init__(self, name, age, sex, grade)<br>       self.salary &#x3D; salary<br></code></pre></td></tr></table></figure>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><ul>
<li>内置命名</li>
<li>全局命名</li>
<li>局部命名</li>
</ul>
<p>若要在方法或类中使用全局变量，使用global关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">count &#x3D; 1<br>def change():<br>    global count<br>    print(count)<br>    count &#x3D; 100<br><br>change()<br>print(count)	#100<br></code></pre></td></tr></table></figure>
<p>若要在嵌套方法中使用外层方法的局部变量，使用nonlocal关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">def outer():<br>    num &#x3D; 10<br>    def inner():<br>        nonlocal num<br>        print(num)	#10<br>        num &#x3D; &quot;str&quot;<br>    inner()<br>    print(num)	#str<br>outer()<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring简介</title>
    <url>/2020/09/22/Spring/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<h2 id="一-什么是Spring"><a href="#一-什么是Spring" class="headerlink" title="一.什么是Spring"></a><strong>一.什么是Spring</strong></h2><p>Spring轻量级的java开发框架，它是为了解决企业应用开发的复杂性而创建的，Spring的核心是控制反转(IOC)和面向切面(AOP)。</p>
<p>一句话概括就是 Spring是一个轻量级的、具有控制反转和面向切面的容器（框架）。</p>
<h3 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a><strong>什么是IOC</strong></h3><p>IOC的定义：所谓IOC，就是由Spring IOC容器来负责对象的生命周期和对象之间的关系。<br>在传统的开发模式下，我们在项目中都是使用new直接生成一个对象，也就是说我所需要的对象是由自己并控制的，但是有了IOC容器后我们所需要的对象由IOC容器负责管理，由原来的主动生成对象 -&gt; 由IOC容器生成对象 ，获得依赖对象的方式改变了，这就是控制反转。<br>在IOC中，通过以配置xml文件或是注解的方式将我们所需要的类和类的路径进行说明，然后在项目中通过<strong>上下文模块</strong>获取xml文件的路径，由IOC容器提供所需要的类<br><a href="https://zhuanlan.zhihu.com/p/64001753">IOC参考链接</a></p>
<h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a><strong>什么是AOP</strong></h3><p>AOP：Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护和处理的一种技术。但如果我们在开发过程中多个模块间有某些功能相同的代码，但是模块间又不存在一种层次间的关系，这时候功能如果需要改变，那么需要对每个类进行改动，这是一个很大的工程，这时候怎么解决代码重复这样的问题呢？答案就是使用AOP，AOP技术利用一种称为“横切”的技术，解剖封装的对象内部，并将类间共同的行为封装到一个新的可重用模块中，减少重复代码，降低模块间的耦合度。</p>
<h3 id="AOP的实现方式有："><a href="#AOP的实现方式有：" class="headerlink" title="AOP的实现方式有："></a>AOP的实现方式有：</h3><ul>
<li>预编译：AspectJ</li>
<li>运行期动态代理（JDK动态代理、CGLib动态代理）：SpringAOP、JbossAOP</li>
</ul>
<h3 id="AOP的主要功能："><a href="#AOP的主要功能：" class="headerlink" title="AOP的主要功能："></a>AOP的主要功能：</h3><ul>
<li>日志记录</li>
<li>性能统计</li>
<li>安全控制</li>
<li>事务处理</li>
<li>异常处理</li>
</ul>
<h3 id="AOP的主要意图："><a href="#AOP的主要意图：" class="headerlink" title="AOP的主要意图："></a>AOP的主要意图：</h3><p>将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码，使业务逻辑更加纯粹</p>
<h3 id="AOP中专业的概念定义："><a href="#AOP中专业的概念定义：" class="headerlink" title="AOP中专业的概念定义："></a><strong>AOP中专业的概念定义：</strong></h3><ul>
<li><p>Aspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。 基于配置的切面只支持singleton模式</p>
</li>
<li><p>Joint point（连接点）：表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point。</p>
</li>
<li><p>Pointcut（切点）：表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方。</p>
</li>
<li><p>Advice（增强）：Advice 定义了在 Pointcut 里面定义的程序点具体要做的操作，有before、after、after-returing、after-throwing、around五种增强。</p>
</li>
<li><p>Introduction（引入）：在不修改类代码的前提下，为类添加新的方法和属性。<br>允许一个切面声明一个实现指定接口的通知对象，并且提供了一个接口实现类来代表这些对象</p>
</li>
<li><p>Target（目标对象）：织入 Advice 的目标对象。</p>
</li>
<li><p>AOP Proxy（AOP代理） AOP框架创建的对象，用来实现切面契约</p>
</li>
<li><p>Weaving（织入）：将 Aspect 和其他对象连接起来, 并创建 Adviced object 的过程</p>
</li>
</ul>
<h3 id="个人理解："><a href="#个人理解：" class="headerlink" title="个人理解："></a><strong>个人理解：</strong></h3><ul>
<li><p>Joint point：是所有可能被织入到Advice中的点,一个类中所有的方法都是连接点</p>
</li>
<li><p>Pointcut：提供一组规则，将符合规则的一组Joint point织入到Advice中</p>
</li>
<li><p>Advice：Advice说明了Pointcut中Joint Point上将要执行的一些动作，即一串代码</p>
</li>
<li><p>Aspect：切面是Advice和Pointcut的组合，描述了切点的行为</p>
</li>
</ul>
<h2 id="二-Spring的组成"><a href="#二-Spring的组成" class="headerlink" title="二.Spring的组成"></a><strong><em>二.Spring的组成</em></strong></h2><p><img src="/2020/09/22/Spring/SpringFramworkRuntime.png" alt="framework"></p>
<p><a href="https://www.cnblogs.com/jpwz/p/10556012.html">参考链接</a></p>
<p>spring由多个模块组成，下面介绍spring每个模块及其功能</p>
<h3 id="Core-Container-核心容器"><a href="#Core-Container-核心容器" class="headerlink" title="Core Container 核心容器"></a><strong>Core Container 核心容器</strong></h3><p>Spring核心容器建立在Beans、Core、Context、SpEl模块之上</p>
<p>Beans模块提供了BeanFactory，是工厂模式的一个经典体现，所有被Spring管理的对象都称为Beans</p>
<p>Core模块提供了框架的基本组成部分，包括IOC和、DI（依赖注入）功能</p>
<p>Context上下文模块建立在Beans和Core模块基础之上，提供了一个框架式的对象访问方式，是访问定义和配置中Beans对象的媒介，ApplicationContext接口通过xml文本的路径访问配置中的beans对象。</p>
<p>SpEl是Spring表达式语言，它提供了强大的表达式语言去支持运行时查询和操作对象</p>
<h3 id="面向切面编程模块"><a href="#面向切面编程模块" class="headerlink" title="面向切面编程模块"></a><strong>面向切面编程模块</strong></h3><p>AOP模块提供了符合AOP要求的面向切面编程的实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，是纯Java实现</p>
<p>Aspects模块提供了AspectJ的集成功能，AspectJ是一个基于Java语言的AOP框架</p>
<p>Instrument模块提供了类植入支持和类加载器的实现，可在特定的应用服务器中使用</p>
<h3 id="数据访问模块"><a href="#数据访问模块" class="headerlink" title="数据访问模块"></a><strong>数据访问模块</strong></h3><p>JDBC、DAO模块：JDBC模块是对JDBC的抽象，减少JDBC编程的代码量</p>
<p>ORM模块：封装了大量的对象关系映射的API</p>
<h3 id="Web模块"><a href="#Web模块" class="headerlink" title="Web模块"></a><strong>Web模块</strong></h3><p>WebSocket模块：提供WebScoket、SockJS的实现，以及对STOMP的支持</p>
<p>Servlet模块：也称为Spring-webmvc模块，包含了Spring的MVC。</p>
<p>Web模块：提供基本的Web开发集成特性，比如多文件上传功能、使用Servlet监听器来初始化Ioc容器以及Web应用上下文。</p>
<p>Portlet模块：提供了对在Portlet环境中使用MVC的支持。</p>
<!-- 底层是Spring的核心容器，包括Beans容器、上下文、Spring表达式和核心工具，是Spring框架最基本的支撑
中间层是Spring的功能组件
上层是Spring的具体使用 -->]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>AOP</tag>
        <tag>java</tag>
        <tag>IOC</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb之Servlet</title>
    <url>/2020/10/04/Servlet/</url>
    <content><![CDATA[<p>最近在使用SpringMVC的时候有是要用到Servlet中的方法，也借此机会复习一波Servlet</p>
<h1 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a><strong>什么是Servlet</strong></h1><p>Servlet的全称是JavaServlet，是运行在Web服务器或应用服务器上的程序，由Servlet容器统一管理，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和HTTP服务器上的数据库或应用程序之间的中间层。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。</p>
<p>Servlet的本质是一个独立的Java类，编写一个Servlet，其实就是按照相应的规范编写一个Java类</p>
<h1 id="servlet容器"><a href="#servlet容器" class="headerlink" title="servlet容器"></a><strong>servlet容器</strong></h1><p>上面说到servlet是运行在web服务器或应用服务器上的程序，由servlet容器统一管理，servlet容器是web服务器或应用服务器的一部分，Servlet不能独立运行，它必须被部署到Servlet容器中，由容器来实例化和调用Servlet的方法，servlet是由servlet容器统一管理的，它负责管理servlet的生命周期。</p>
<h1 id="servlet的工作流程"><a href="#servlet的工作流程" class="headerlink" title="servlet的工作流程"></a><strong>servlet的工作流程</strong></h1><p><img src="/2020/10/04/Servlet/servlet.jpg" alt="servlet"></p>
<h1 id="servlet的使用方法和原理"><a href="#servlet的使用方法和原理" class="headerlink" title="servlet的使用方法和原理"></a><strong>servlet的使用方法和原理</strong></h1><h2 id="servlet的使用"><a href="#servlet的使用" class="headerlink" title="servlet的使用"></a><strong>servlet的使用</strong></h2><p>Servlet技术的核心是Servlet接口，它是所有Servlet类必须直接或者间接实现的一个接口。要想使用servlet，就必须实现servlet接口或者继承实现了servlet接口的类。</p>
<h2 id="servlet的工作原理"><a href="#servlet的工作原理" class="headerlink" title="servlet的工作原理"></a><strong>servlet的工作原理</strong></h2><p>当客户端有请求时，Servlet容器实例化相对应的servlet，并调用它的service()方法，传入ServletRequest对象和ServletResponse对象，这两个对象是由servlet容器封装好的，ServletRequest对象封装了http的请求，ServletResponse则封装了对http请求的响应。</p>
<p>对于每一个应用程序，Servlet容器还会创建一个ServletContext对象。这个对象中封装了上下文（应用程序）的环境详情。</p>
<h1 id="servlet的生命周期"><a href="#servlet的生命周期" class="headerlink" title="servlet的生命周期"></a><strong>servlet的生命周期</strong></h1><p>servlet的生命周期分为init()、service()和destroy()三个过程</p>
<ul>
<li>init()</li>
</ul>
<p>当Servlet第一次被请求时，Servlet容器就会开始调用这个方法来初始化一个Servlet对象出来，但是这个方法在后续请求中不会再被Servlet容器调用，可以利用init()方法对servlet进行初始化工作</p>
<ul>
<li>service()</li>
</ul>
<p>每当请求Servlet时，Servlet容器就会调用这个方法</p>
<ul>
<li>destroy()</li>
</ul>
<p>当要销毁Servlet时，Servlet容器就会调用这个方法，在卸载应用程序或者关闭Servlet容器时，就会发生这种情况，一般在这个方法中会写一些清除代码。</p>
<h1 id="Servlet、ServletRequest、ServletResponse接口"><a href="#Servlet、ServletRequest、ServletResponse接口" class="headerlink" title="Servlet、ServletRequest、ServletResponse接口"></a><strong>Servlet、ServletRequest、ServletResponse接口</strong></h1><h2 id="Servlet接口："><a href="#Servlet接口：" class="headerlink" title="Servlet接口："></a><strong>Servlet接口：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public interface Servlet &#123;<br>    void init(ServletConfig var1) throws ServletException;<br> <br> &#x2F;&#x2F; 获取配置信息<br>    ServletConfig getServletConfig();<br> <br>    void service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException;<br> <br> &#x2F;&#x2F; 获取servlet信息 传给init（）方法的ServletConfig对象<br>    String getServletInfo();<br> <br>    void destroy();<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="ServletRequest接口"><a href="#ServletRequest接口" class="headerlink" title="ServletRequest接口"></a><strong>ServletRequest接口</strong></h2><p>ServletRequest接口中最常用的一个方法是getParameter方法，用于返回请求参数的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">String getParameter(String var1);&#x2F;&#x2F;返回请求参数的值<br></code></pre></td></tr></table></figure>
<h2 id="ServletResponse接口"><a href="#ServletResponse接口" class="headerlink" title="ServletResponse接口"></a><strong>ServletResponse接口</strong></h2><p> javax.servlet.ServletResponse接口表示一个Servlet响应，在调用Servlet的Service()方法前，Servlet容器会先创建一个ServletResponse对象，并把它作为第二个参数传给Service()方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public interface ServletResponse &#123;<br><br>    String getCharacterEncoding();<br> <br>    String getContentType();<br> <br>    PrintWriter getWriter() throws IOException;<br> <br>    void setCharacterEncoding(String var1);<br> <br>    void setContentLength(int var1);<br> <br> 	&#x2F;&#x2F; ....省略一些方法<br>    void setContentType(String var1);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>其中最常用的方法是： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">PrintWriter getWriter() throws IOException;<br><br>void setContentType(String var1);<br></code></pre></td></tr></table></figure>
<p>在响应客户端请求时，都先应调用setContentType方法，设置响应的内容类型，并将“text/html”作为一个参数传入，这是在告诉浏览器响应的内容类型为HTML，需要以HTML的方法解释响应内容而不是普通的文本，或者也可以加上“charset=UTF-8”改变响应的编码方式以防止发生中文乱码现象。</p>
<p>getWriter方法返回一个可以向客户端发送文本的java对象，可以在客户端页面中输出信息</p>
<h1 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a><strong>ServletContext对象</strong></h1><p>ServletContext对象表示Servlet应用程序。每个Web应用程序都只有一个ServletContext对象。有了ServletContext对象，就可以共享从应用程序中的所有资料处访问到的信息，并且可以动态注册Web对象。前者将对象保存在ServletContext中的一个内部Map中。保存在ServletContext中的对象被称作属性。</p>
<p>servletcontext对象中的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Object getAttribute(String var1);<br> <br>Enumeration&lt;String&gt; getAttributeNames();<br> <br>void setAttribute(String var1, Object var2);<br> <br>void removeAttribute(String var1);<br></code></pre></td></tr></table></figure>
<h1 id="ServletConfig接口"><a href="#ServletConfig接口" class="headerlink" title="ServletConfig接口"></a><strong>ServletConfig接口</strong></h1><p>当Servlet容器初始化Servlet时，Servlet容器会给Servlet的init()方式传入一个ServletConfig对象。一些方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">String getInitParameter(String name) &#x2F;&#x2F;根据初始化参数名，返回对应的初始化参数值<br><br>Enumeration getInitParameterNames()	&#x2F;&#x2F;返回一个Enumeration对象，其中包含所有的初始化参数名<br><br>ServletContext getServletContext()	&#x2F;&#x2F;返回一个代表当前Web应用的，ServletContext对象<br><br>String getServletName()	&#x2F;&#x2F;返回Servlet的名字，即web.xml中元素的值<br></code></pre></td></tr></table></figure>
<h1 id="HttpServlet、HttpServletRequest、HttpServlelResponse"><a href="#HttpServlet、HttpServletRequest、HttpServlelResponse" class="headerlink" title="HttpServlet、HttpServletRequest、HttpServlelResponse"></a><strong>HttpServlet、HttpServletRequest、HttpServlelResponse</strong></h1><p>在实际应用中，最常用的Servlet类HttpServlet抽象类<br>常用的接口是ServletRequest的子接口HttpServletRequest 和 ServletResponse的子接口HttpServletResponse </p>
<p>继承关系如下图：</p>
<p><img src="/2020/10/04/Servlet/relationship.jpg" alt="relationship"></p>
<h2 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a><strong>HttpServlet</strong></h2><p>常用Servlet对象是javax.servlet.http包下的HttpServlet抽象类</p>
<p>HttpServlet抽象类是继承于GenericServlet抽象类而来的。使用HttpServlet抽象类时，还需要借助分别代表Servlet请求和Servlet响应的HttpServletRequest和HttpServletResponse对象</p>
<p>继承HttpServlet的Servlet类中要实现doXX方法，分别用于客户端的不同请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;<br>&#125;<br><br>...<br><br>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>HttpServlet类中重写了service()方法，根据客户端请求类型的不同而调用相应的doXX方法</p>
<h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a><strong>HttpServletRequest</strong></h2><p>HttpServletRequest接口中添加了几个重要方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Cookie[] getCookies();&#x2F;&#x2F;返回一个cookie对象数组<br><br>String getHeader(String var1);&#x2F;&#x2F;返回指定HTTP标题的值<br><br>HttpSession getSession();&#x2F;&#x2F;返回与这个请求相关的会话对象<br></code></pre></td></tr></table></figure>
<h2 id="HttpServlelResponse"><a href="#HttpServlelResponse" class="headerlink" title="HttpServlelResponse"></a><strong>HttpServlelResponse</strong></h2><p>HttpServlelResponse中添加的重要方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">void addCookie(Cookie var1);&#x2F;&#x2F;给这个响应添加一个cookie<br><br>void addHeader(String var1, String var2);&#x2F;&#x2F;给这个请求添加一个响应头<br><br>void sendRedirect(String var1) throws IOException;&#x2F;&#x2F;发送一条响应码，讲浏览器跳转到指定的位置<br><br>void setStatus(int var1);&#x2F;&#x2F;设置响应行的状态码<br></code></pre></td></tr></table></figure>

<h1 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a><strong>cookie和session</strong></h1><p>会话（Session）跟踪是Web程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是Cookie与Session</p>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a><strong>cookie</strong></h2><p>HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。要跟踪该会话，必须引入一种机制。而cookie就是这样一种机制。</p>
<p>由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理。</p>
<p>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response对象的addCookie方法向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</p>
<p>Cookie类在javax.servlet.http.Cookie包下</p>
<p>Cookie对象中常用的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public void setDomain(String pattern)	&#x2F;&#x2F;该方法设置 cookie 适用的域，例如 xxx.com<br><br>public String getDomain()	&#x2F;&#x2F;该方法获取 cookie 适用的域，例如 xxx.com。<br><br>&#x2F;&#x2F;该方法设置cookie有效时间（以秒为单位）。如果不这样设置，cookie只会在当前session会话中持续有效。<br>public void setMaxAge(int expiry)<br><br>&#x2F;&#x2F;该方法返回 cookie 的最大生存周期（以秒为单位），默认情况下，-1 表示 cookie 将持续下去，直到浏览器关闭。<br>public int getMaxAge()	<br><br>public String getName()	&#x2F;&#x2F;该方法返回 cookie 的名称。名称在创建后不能改变。<br><br>public void setValue(String newValue)	&#x2F;&#x2F;该方法设置与 cookie 关联的值。<br><br>public String getValue() &#x2F;&#x2F;该方法获取与 cookie 关联的值。<br><br>&#x2F;&#x2F;该方法设置 cookie 适用的路径。如果不指定路径，与当前页面相同目录下的（包括子目录下的）所有 URL 都会返回 cookie。<br>public void setPath(String uri)<br><br>public String getPath()	&#x2F;&#x2F;该方法获取 cookie 适用的路径。<br><br>&#x2F;&#x2F;该方法设置布尔值，表示 cookie 是否应该只在加密的（即 SSL）连接上发送。<br>public void setSecure(boolean flag)<br><br>public void setComment(String purpose)	&#x2F;&#x2F;设置cookie的注释。该注释在浏览器向用户呈现 cookie 时非常有用。<br><br>public String getComment()	&#x2F;&#x2F;获取 cookie 的注释，如果 cookie 没有注释则返回 null。<br></code></pre></td></tr></table></figure>


<h2 id="session"><a href="#session" class="headerlink" title="session"></a><strong>session</strong></h2><p>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。</p>
<p>Session对应的类为javax.servlet.http.HttpSession类</p>
<p>Servlet里通过request.getSession()方法获取该客户的Session</p>
<p>HttpSession对象中常用的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F;该方法返回在该 session 会话中具有指定名称的对象，如果没有指定名称的对象，则返回 null。<br>public Object getAttribute(String name)<br><br>&#x2F;&#x2F;该方法使用指定的名称绑定一个对象到该 session 会话。<br>public void setAttribute(String name, Object value)<br><br>&#x2F;&#x2F;该方法返回 String 对象的枚举，String 对象包含所有绑定到该 session 会话的对象的名称。<br>public Enumeration getAttributeNames()<br><br>&#x2F;&#x2F;设置session的超时时间，以秒为单位。<br>public void setMaxInactiveInterval(int interval)<br><br>&#x2F;&#x2F;获取session的超时时间以秒为单位。<br>public int getMaxInactiveInterval()<br><br>&#x2F;&#x2F;该方法返回一个包含分配给该 session 会话的唯一标识符的字符串。<br>public String getId()<br><br>&#x2F;&#x2F;该方法返回客户端最后一次发送与该 session 会话相关的请求的时间自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。<br>public long getLastAccessedTime()<br><br>&#x2F;&#x2F;该方法指示该 session 会话无效，并解除绑定到它上面的任何对象。<br>	public void invalidate()<br><br>&#x2F;&#x2F;如果客户端还不知道该 session 会话，或者如果客户选择不参入该 session 会话，则该方法返回 true。<br>	public boolean isNew()<br><br>&#x2F;&#x2F;该方法将从该 session 会话移除指定名称的对象。<br>	public void removeAttribute(String name)<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>JavaWeb</tag>
        <tag>Servlet</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>常用sql语句</title>
    <url>/2020/10/21/dboperator/</url>
    <content><![CDATA[<p>掌握sql语句是后端程序员与数据库打交道的必备技能，下面简单回顾一下一些常用的sql语句</p>
<h1 id="对数据库的操作"><a href="#对数据库的操作" class="headerlink" title="对数据库的操作"></a><strong>对数据库的操作</strong></h1><h2 id="终端进入数据库："><a href="#终端进入数据库：" class="headerlink" title="终端进入数据库："></a><strong>终端进入数据库：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">mysql -u root -p<br></code></pre></td></tr></table></figure>
<h2 id="查看所有的数据库："><a href="#查看所有的数据库：" class="headerlink" title="查看所有的数据库："></a><strong>查看所有的数据库：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">show databases;<br></code></pre></td></tr></table></figure>
<h2 id="创建数据库："><a href="#创建数据库：" class="headerlink" title="创建数据库："></a><strong>创建数据库：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">create database dbname;<br></code></pre></td></tr></table></figure>
<h2 id="删除数据库："><a href="#删除数据库：" class="headerlink" title="删除数据库："></a><strong>删除数据库：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">drop database dbname;<br></code></pre></td></tr></table></figure>
<h2 id="选择数据库："><a href="#选择数据库：" class="headerlink" title="选择数据库："></a><strong>选择数据库：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">use dbname;<br></code></pre></td></tr></table></figure>
<h2 id="查看当前数据库中的所有表："><a href="#查看当前数据库中的所有表：" class="headerlink" title="查看当前数据库中的所有表："></a><strong>查看当前数据库中的所有表：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">show tables;<br></code></pre></td></tr></table></figure>
<h1 id="对表结构的操作"><a href="#对表结构的操作" class="headerlink" title="对表结构的操作"></a><strong>对表结构的操作</strong></h1><h2 id="查看表的结构："><a href="#查看表的结构：" class="headerlink" title="查看表的结构："></a><strong>查看表的结构：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">desc tablename;<br></code></pre></td></tr></table></figure>
<h2 id="查看表的创建语句："><a href="#查看表的创建语句：" class="headerlink" title="查看表的创建语句："></a><strong>查看表的创建语句：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">show create table newtable;<br></code></pre></td></tr></table></figure>
<h2 id="创建表："><a href="#创建表：" class="headerlink" title="创建表："></a><strong>创建表：</strong></h2><pre><code>create table table_name(
字段名1 数据类型1 可选的约束条件1,
字段名2 数据类型2 可选的约束条件2,
...
）；</code></pre>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">create table newtable(<br>id int primary key not null,<br>name varchar(10) not null,<br>age int<br>);<br></code></pre></td></tr></table></figure>
<h2 id="删除表："><a href="#删除表：" class="headerlink" title="删除表："></a><strong>删除表：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">drop table newtable;<br></code></pre></td></tr></table></figure>
<h2 id="修改表："><a href="#修改表：" class="headerlink" title="修改表："></a><strong>修改表：</strong></h2><p>添加字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">alter table newtable add address varchar(10);<br></code></pre></td></tr></table></figure>
<p>重命名字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">alter table newtable change address addr varchar(10);<br></code></pre></td></tr></table></figure>
<p>修改字段类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">alter table newtable modify id varchar(10);<br></code></pre></td></tr></table></figure>
<p>修改字段约束：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">alter table newtable modify id int;<br></code></pre></td></tr></table></figure>
<p>删除字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">alter table newtable drop addr;<br></code></pre></td></tr></table></figure>
<p>设置默认值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">alter table newtable alter age set default 0;<br></code></pre></td></tr></table></figure>
<p>删除默认值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">alter table newtable alter age drop default;<br></code></pre></td></tr></table></figure>
<h1 id="对表内容的增删查改"><a href="#对表内容的增删查改" class="headerlink" title="对表内容的增删查改"></a><strong>对表内容的增删查改</strong></h1><h2 id="基本查询语句"><a href="#基本查询语句" class="headerlink" title="基本查询语句"></a><strong>基本查询语句</strong></h2><p><strong>查询表的所有字段：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select * from tablename;<br></code></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select * from newtable<br></code></pre></td></tr></table></figure>
<p><strong>查询指定的字段：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select n1,n2,n3,... from tablename;	<br></code></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select id,name from newtable<br></code></pre></td></tr></table></figure>
<p><strong>as关键字：</strong></p>
<p>给字段起别名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select id as 学号,name as 姓名 from newtable<br></code></pre></td></tr></table></figure>
<p>给表起别名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select t.id,t.name from newtable as t;<br></code></pre></td></tr></table></figure>
<h2 id="条件查询语句"><a href="#条件查询语句" class="headerlink" title="条件查询语句"></a><strong>条件查询语句</strong></h2><h3 id="使用比较运算符进行查询"><a href="#使用比较运算符进行查询" class="headerlink" title="使用比较运算符进行查询"></a><strong>使用比较运算符进行查询</strong></h3><p>比较运算符：= &gt; ≥ &lt; ≤ !=</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select id,name from newtable where age&gt;&#x3D;18<br><br>select id,name from newtable where name&#x3D;&quot;张三&quot;<br></code></pre></td></tr></table></figure>
<h3 id="使用逻辑运算符进行查询"><a href="#使用逻辑运算符进行查询" class="headerlink" title="使用逻辑运算符进行查询"></a><strong>使用逻辑运算符进行查询</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select id,name from newtable where id&gt;1235 and age&gt;18<br><br>select * from newtable where age&gt;18 or sex&#x3D;&#39;男&#39;<br></code></pre></td></tr></table></figure>
<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a><strong>模糊查询</strong></h3><p>模糊查询使用like进行查询，%代表任意多个关键字 下划线_ 表示任意一个字符</p>
<p>一般模糊查询语句如：SELECT 字段 FROM 表 WHERE 某字段 [not]Like 条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select * from newtable where name like &quot;张%&quot;<br><br>select * from newtable where name like &quot;_一&quot;<br></code></pre></td></tr></table></figure>
<p>如果字段名字中存在 下划线_ 或者 百分号%，此时要进将字符转义，转义要在语句后面加上 escape’’</p>
<p>如，表中字段存在下划线，则查询为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select * from newtable where addr like &#39;%&#x2F;_%&#39; escape &#39;&#x2F;&#39;<br></code></pre></td></tr></table></figure>
<p>[]：表示匹配括号中所列字符的任意一个，类似正则表达式</p>
<p> 如果[ ] 内有一系列字符（01234、abcde之类的）则可略写为“0-4”、“a-e” </p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select * from newtable where name like &#39;张[三七八]&#39;;<br></code></pre></td></tr></table></figure>
<p>[^ ]表示表示不在括号所列之内的单个字符。</p>
<h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a><strong>范围查询</strong></h3><p>范围查询分为连续查询和非连续查询</p>
<p>in关键字表示一个非连续的范围</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select * from newtable where age in(18,19,20);<br></code></pre></td></tr></table></figure>
<p>between and 表示在一个连续的范围内</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select * from newtable where age between 17 and 22;<br></code></pre></td></tr></table></figure>

<h3 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a><strong>空判断</strong></h3><p>判断字段是否为空： is null</p>
<p>不为空：is not null</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select * from newtable where addr is not null<br></code></pre></td></tr></table></figure>
<h3 id="exists语句"><a href="#exists语句" class="headerlink" title="exists语句"></a><strong>exists语句</strong></h3><p>使用exists判断某行是否存在</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a><strong>排序</strong></h3><p>排序的查询语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select * from 表名 order by 列1 asc|desc [,列2 asc|desc,...]<br></code></pre></td></tr></table></figure>
<p>asc为升序，desc为降序，默认为asc</p>
<p>order by 语句只能对最终结果进行排序</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select * from newtable order by id asc,age desc;<br></code></pre></td></tr></table></figure>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a><strong>分页</strong></h3><p>获取所有数据的前n-m条：select * from 表名 limit start=n,count=m，start默认为0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select * from newtable limit 1,5;<br></code></pre></td></tr></table></figure>
<h3 id="取字段值唯一"><a href="#取字段值唯一" class="headerlink" title="取字段值唯一"></a><strong>取字段值唯一</strong></h3><p>distinct 关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select distinct age from newtable<br></code></pre></td></tr></table></figure>
<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a><strong>聚合函数</strong></h3><h4 id="求总数："><a href="#求总数：" class="headerlink" title="求总数："></a><strong>求总数：</strong></h4><p>count( * )：统计元组个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select count(*) from newtable<br></code></pre></td></tr></table></figure>
<p>count([distinct|all]列名)：统计某列值的个数</p>
<h4 id="求最大值："><a href="#求最大值：" class="headerlink" title="求最大值："></a><strong>求最大值：</strong></h4><p>max(某列)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select max(age) from newtable<br></code></pre></td></tr></table></figure>
<h4 id="求最小值："><a href="#求最小值：" class="headerlink" title="求最小值："></a><strong>求最小值：</strong></h4><p>min(某列)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select min(age) from newtable<br></code></pre></td></tr></table></figure>
<h4 id="求和："><a href="#求和：" class="headerlink" title="求和："></a><strong>求和：</strong></h4><p>sum(某列)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select sum(age) from newtable<br></code></pre></td></tr></table></figure>
<h4 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a><strong>平均值</strong></h4><p>avg(某列)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select avg(age) from newtable<br></code></pre></td></tr></table></figure>
<h3 id="分组操作"><a href="#分组操作" class="headerlink" title="分组操作"></a><strong>分组操作</strong></h3><p>分组操作使用group by，将查询返回的结果集进行一个分组，并展示各个分组中排在第一个的记录，将分组中其余成员隐藏。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select avg(age) from newtable group by sex<br></code></pre></td></tr></table></figure>
<h3 id="having子句"><a href="#having子句" class="headerlink" title="having子句"></a><strong>having子句</strong></h3><p>HAVING 子句是一个高配版的 where 子句，无论是我们的分组或是排序，都是基于以返回的结果集，也就是说 where 子句的筛选已经结束。<br>如果我们对排序、分组后的数据集依然有筛选需求，就要用到 HAVING 子句了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select avg(age) as avg_age from newtable group by sex<br>having avg_age &gt; 20;<br></code></pre></td></tr></table></figure>
<h2 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a><strong>插入语句</strong></h2><p>插入语句的一般格式为：insert into tablename(…) values(…);</p>
<p>全列插入：值的顺序与表结构字段的顺序完全一一对应</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">insert into newtable values (1241,&quot;张三&quot;,22,&quot;男&quot;,&quot;北京市_&quot;);<br></code></pre></td></tr></table></figure>
<p>部分列插入：值的顺序与给出的列顺序对应，此时需要根据实际的数据的特点 填写对应字段列表</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">insert into newtable(id,name,sex) values (1242,&quot;张三&quot;,&quot;男&quot;);<br></code></pre></td></tr></table></figure>
<p>全列多行插入：</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">insert into newtable values (1245,&quot;张三&quot;,22,&quot;男&quot;,&quot;北京市_&quot;),(1246,&quot;张三&quot;,22,&quot;男&quot;,&quot;北京市_&quot;);<br></code></pre></td></tr></table></figure>
<p>部分列多行插入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">insert into newtable(id,name,age) values(1222,&quot;li&quot;,21),(1223,&quot;zhang&quot;,22);<br></code></pre></td></tr></table></figure>
<h2 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a><strong>删除语句</strong></h2><p>删除语句的一般格式为：delete from tablename where 条件</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">delete from newtable where id&#x3D;1242 or id&#x3D;1241<br></code></pre></td></tr></table></figure>
<h2 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a><strong>修改语句</strong></h2><p>修改语句的一般格式为：update tablename set 列1=值1,列2=值2… where 条件</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">update newtable set name&#x3D;&quot;菜逼&quot;,age&#x3D;21 where id&#x3D;1246;<br></code></pre></td></tr></table></figure>
<h1 id="多表查询操作"><a href="#多表查询操作" class="headerlink" title="多表查询操作"></a><strong>多表查询操作</strong></h1><p>创建学生表stu、课程表course、学生选课表sc</p>
<p>stu:</p>
<p><img src="/2020/10/21/dboperator/stu.png" alt="stu"></p>
<p>course:</p>
<p><img src="/2020/10/21/dboperator/course.png" alt="course"></p>
<p>sc:</p>
<p><img src="/2020/10/21/dboperator/sc.png" alt="sc"></p>
<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a><strong>连接查询</strong></h2><p>连接查询的where子句中用来连接两个表的条件称为 连接条件</p>
<p>主要的连接条件为比较运算符，主要有 = &gt; &lt; ≥ ≤ !=等</p>
<p>一般格式为：[table1] c1 比较运算符 [table2] c2</p>
<p>如：</p>
<p>查询每个学生及其选修课程的情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select sum(ccredit)<br>from sc,course<br>where sc.sno&#x3D;&#39;201215121&#39; and sc.cno&#x3D;course.cno<br></code></pre></td></tr></table></figure>

<p>查询选修2号课程且成绩在80分以上的所有学生的学号和姓名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select stu.sno,stu.sname<br>from stu,sc<br>where stu.sno&#x3D;sc.sno and sc.cno&#x3D;&#39;2&#39; and sc.grade&gt;80;<br><br></code></pre></td></tr></table></figure>
<h2 id="自身连接"><a href="#自身连接" class="headerlink" title="自身连接"></a><strong>自身连接</strong></h2><p>如：</p>
<p>查询每一门课的间接先修课</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select first.cno,second.cpno<br>from course first,course second<br>where first.cpno &#x3D; second.cno;<br></code></pre></td></tr></table></figure>

<h2 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a><strong>多表连接</strong></h2><p>如：</p>
<p>查询每个学生的学号、姓名、选修的课程名及成绩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select stu.sno,stu.sname,course.cno,sc.grade<br>from stu,course,sc<br>where stu.sno&#x3D;sc.sno and course.cno &#x3D; sc.cno<br><br></code></pre></td></tr></table></figure>
<h2 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a><strong>嵌套查询</strong></h2><p>一个select-from-where语句称为一个查询块，将一个查询块放在另一个查询块的where子句或having短语的条件中称为嵌套查询</p>
<p>嵌套查询中，子查询的结果往往是一个集合，所以谓词in是嵌套查询中最常使用的谓词</p>
<p>如：</p>
<p>查询与“刘晨”在同一个系的学生</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select *<br>from stu<br>where sdept in <br>(select sdept<br>from stu<br>where sname&#x3D;&quot;刘晨&quot;);<br></code></pre></td></tr></table></figure>

<p>查询选修了课程名为“信息系统”的学生学号和姓名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select sno,sname<br>from stu<br>where sno in <br>	(select sno<br>	from sc<br>	where sc.cno in<br>		(select course.cno<br>		from course<br>		where course.cname&#x3D;&quot;信息系统&quot;));<br></code></pre></td></tr></table></figure>

<p>若采用连接查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select stu.sno,stu.sname<br>from stu,sc,course<br>where course.cname&#x3D;&quot;信息系统&quot; and course.cno &#x3D; sc.cno and stu.sno &#x3D; sc.sno;<br></code></pre></td></tr></table></figure>
<p>在实际应用中，能使用连接查询尽量使用连接查询</p>
<h3 id="带有any、all谓词的子查询"><a href="#带有any、all谓词的子查询" class="headerlink" title="带有any、all谓词的子查询"></a><strong>带有any、all谓词的子查询</strong></h3><blockquote>
<p>any 大于子查询中任何一个<br>&lt; any 小于子查询中任何一个<br>all 大于子查询中所有<br>&lt; all 小于子查询中所有<br>…</p>
</blockquote>
<p>如：</p>
<p>查询非计算机科学系中比计算机科学系任意一个学生年龄小的学生姓名和年龄</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select sname,sage<br>from stu<br>where sage &lt; any<br>(<br>	select sage<br>	from stu<br>	where sdept&#x3D;&#39;cs&#39;) and sdept!&#x3D;&#39;cs&#39;;<br></code></pre></td></tr></table></figure>
<h3 id="带有exists谓词的子查询"><a href="#带有exists谓词的子查询" class="headerlink" title="带有exists谓词的子查询"></a>带有exists谓词的子查询</h3><p>exists表示存在量词，带有exists谓词的子查询只返回逻辑值，exists的作用域为子查询</p>
<p>流程为：取出外层查询的元组，根据它进行内层查询，如果返回值为真，则存入结果集</p>
<p>如：</p>
<p>查询所有选修了1号课程的学生姓名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select sname<br>from stu<br>where exists<br>(select sno<br>from sc<br>where sc.sno &#x3D; stu.sno and cno&#x3D;&#39;1&#39;);<br><br></code></pre></td></tr></table></figure>
<p>与exists对应的是not exists</p>
<p>如：</p>
<p>查询没有选修1号课程的学生姓名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select sname<br>from stu<br>where not exists<br>(select *<br>from sc<br>where stu.sno&#x3D;sc.sno and cno&#x3D;&#39;1&#39;);<br></code></pre></td></tr></table></figure>
<h3 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a><strong>集合查询</strong></h3><p>select语句的查询结果为元组的集合，所以多个select语句的结果可进行集合操作</p>
<p>集合操作主要有 并操作union、交操作intersect、差操作except</p>
<p><strong>注：参加集合操作的各查询结果的列数必须相同，对应的数据类型也必须相同</strong></p>
<p>如：</p>
<p>查询计算机科学系的学生及年龄不大于19岁的学生</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select *<br>from stu<br>where sdept&#x3D;&#39;cs&#39;<br><br>union<br><br>select *<br>from stu<br>where sage&lt;&#x3D;19<br></code></pre></td></tr></table></figure>
<p>查询计算机科学系的学生与年龄不大于19岁的学生的交集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select *<br>from stu<br>where sdept&#x3D;&#39;cs&#39;<br><br>intersect<br><br>select *<br>from stu<br>where sage&lt;&#x3D;19;<br></code></pre></td></tr></table></figure>
<p>查询计算机科学系的学生与年龄不大于19岁的学生的差集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">select *<br>from stu<br>where sdept&#x3D;&#39;cs&#39;<br><br>except<br><br>select *<br>from stu<br>where sage&lt;&#x3D;19;<br></code></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax简介</title>
    <url>/2020/10/13/ajax/</url>
    <content><![CDATA[<h1 id="什么是ajax"><a href="#什么是ajax" class="headerlink" title="什么是ajax"></a><strong>什么是ajax</strong></h1><p>Ajax即“Asynchronous Javascript And XML”(异步JavaScript 和XML)，是指一种创建交互式网页应用的网页开发技术。通过在后台与服务器进行少量数据交换，Ajax可以使用网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新（无刷新技术）。传统的网页（不使用Ajax）如果需要更新内容，必须重载整个网页页面。</p>
<p>使用ajax，要在html或jsp文件中加上对ajax的引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;s3.pstatp.com&#x2F;cdn&#x2F;expire-1-M&#x2F;jquery&#x2F;3.3.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<p>一个完整的ajax常用请求如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>       function uservalidator() &#123;<br>           $.ajax(&#123;<br>           	&#x2F;&#x2F;请求的url地址<br>               url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;test&quot;,<br>               &#x2F;&#x2F;参数值 可以传递Json字符串类型 也可以传递对象类型<br>               data:&#123;&quot;name&quot;:$(&quot;#user&quot;).val(),&quot;passwords&quot;:$(&quot;#passwords&quot;).val()&#125;,<br>               &#x2F;&#x2F;参数类型<br>               &#x2F;&#x2F;dataType:&quot;json&quot;,<br>               &#x2F;&#x2F;请求方式<br>               type:&quot;GET&quot;,<br>               &#x2F;&#x2F;回调函数<br>               success:function (data) &#123;<br>                   $(&quot;#usermsg&quot;).html(data)<br>               &#125;<br>           &#125;)<br>       &#125;<br>   &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
<p>也可以将ajax换成相应的请求方法    $.get({…})、$.post({…}) 等等</p>
<p>ajax与mvc的交互过程如下：</p>
<p><img src="/2020/10/13/ajax/process.jpg" alt="process"></p>
<h1 id="ajax和jsp"><a href="#ajax和jsp" class="headerlink" title="ajax和jsp"></a><strong>ajax和jsp</strong></h1><p>为什么现在前后端的数据交互基本上不用jsp而使用html+ajax？</p>
<p>首先要理解jsp的原理和ajax的原理</p>
<ul>
<li>jsp原理：</li>
</ul>
<p>jsp的本质是servlet，服务器通过相应的请求找到jsp页面并将jsp页面转换成java程序（servlet），后台把返回的数据通过这段java代码将结果按照html的格式输出给前端浏览器显示。在jsp中，html和java代码相结合</p>
<ul>
<li>ajax原理：</li>
</ul>
<p>服务器通过json直接把数据返回给前端浏览器，而浏览器中使用js解析数据，并改变浏览器中的内容</p>
<ul>
<li>jsp的缺点：</li>
</ul>
<p>1.动态和静态资源放在一起，一旦服务器出现状况，前后台一起玩完，用户体验极差。</p>
<p>2.一旦jsp出现了问题，就需要前端后端发开人员一块来分析解决，效率低。</p>
<p>3.jsp无法使用nginx等。</p>
<p>4.jsp页面复杂，难以修改。</p>
<p>5.第一次加载jsp需要编译成servlet，时间久，而且业务量大的时候，jsp负担太大。</p>
<p>6.jsp技术无法动态的展示数据，返回数据的时候都是整个页面一起返回，没有办法做到前后端分离</p>
<p>由于jsp的这些缺点，前后端分离的思想很快就开始流行了</p>
<p>** 项目开发的趋势：实现前后端的真正解耦**</p>
<p>以前的老项目中：</p>
<p>客户端请求 -&gt; 服务端处理请求 -&gt; 业务逻辑 -&gt; 解析jsp文件 -&gt; 返回jsp</p>
<p>新的方式：</p>
<p>客户端请求 -&gt; html页面调用接口产生数据（ajax、json） -&gt; html动态改变内容</p>
<p>前后端各管各，要进行数据交互的时候，只要使用前后端约定好的接口进行交互即可</p>
<p><strong>但是jsp和ajax并不冲突，很多网站往往将两者结合，比如，首屏的渲染使用jsp，数据的交互使用ajax</strong></p>
<h1 id="ajax与mvc交互实例"><a href="#ajax与mvc交互实例" class="headerlink" title="ajax与mvc交互实例"></a><strong>ajax与mvc交互实例</strong></h1><p>模仿注册页面中账号和密码的有效性检验</p>
<p>User类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Component<br>public class User &#123;<br><br>    @NotBlank(message &#x3D; &quot;用户名不能为空&quot;)<br>    private String name;<br>    @NotBlank(message &#x3D; &quot;密码不能为空&quot;)<br>    @Length(min &#x3D; 3,max &#x3D; 8,message &#x3D; &quot;密码位数为3-8位&quot;)<br>    private String passwords;<br><br>    public String getPasswords() &#123;<br>        return passwords;<br>    &#125;<br><br>    public String getName() &#123;<br>        return name;<br>    &#125;<br><br>    public void setPasswords(String passwords) &#123;<br><br>        this.passwords &#x3D; passwords;<br>    &#125;<br><br>    public void setName(String name) &#123;<br>        this.name &#x3D; name;<br>    &#125;<br><br>    public String toString()&#123;<br>        return &quot;[name&#x3D;&quot;+name+&quot;,passwords&#x3D;&quot;+passwords+&quot;]&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>UserController：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Controller<br>public class UserController &#123;<br><br>    @RequestMapping(&quot;&#x2F;test&quot;)<br>    @ResponseBody<br>    public String test(User user)&#123;<br>&#x2F;&#x2F;        System.out.println(user+&quot; &quot;+passwords);<br>        System.out.println(user);<br>        String msg &#x3D; &quot;&quot;;<br>        if(user.getName()!&#x3D;null)&#123;<br>            if(user.getName().equals(&quot;123&quot;))&#123;<br>                msg &#x3D;  &quot;ok&quot;;<br>            &#125;else&#123;<br>                msg &#x3D;  &quot;failed&quot;;<br>            &#125;<br>        &#125;<br>        if(user.getPasswords()!&#x3D;null)&#123;<br>            if(user.getPasswords().equals(&quot;1233&quot;))&#123;<br>                msg &#x3D;  &quot;ok&quot;;<br>            &#125;else&#123;<br>                msg &#x3D; &quot;failed&quot;;<br>            &#125;<br>        &#125;<br>        return msg;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>jsp文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;s3.pstatp.com&#x2F;cdn&#x2F;expire-1-M&#x2F;jquery&#x2F;3.3.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;script&gt;<br>        function uservalidator() &#123;<br>            $.ajax(&#123;<br>                url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;test&quot;,<br>                data:&#123;&quot;name&quot;:$(&quot;#user&quot;).val(),&quot;passwords&quot;:$(&quot;#passwords&quot;).val()&#125;,<br>                success:function (data) &#123;<br>                    $(&quot;#usermsg&quot;).html(data)<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &lt;&#x2F;script&gt;<br>    &lt;script&gt;<br>        function passwordsvalidator() &#123;<br>            $.ajax(&#123;<br>                url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;test&quot;,<br>                data:&#123;&quot;name&quot;:$(&quot;#user&quot;).val(),&quot;passwords&quot;:$(&quot;#passwords&quot;).val()&#125;,<br>                success:function (data) &#123;<br>                    $(&quot;#pswmsg&quot;).html(data)<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &lt;&#x2F;script&gt;<br>    &lt;form&gt;<br>        用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot; id&#x3D;&quot;user&quot; onblur&#x3D;&quot;uservalidator()&quot;&gt;&lt;br&gt;<br>        &lt;p id&#x3D;&quot;usermsg&quot;&gt;&lt;&#x2F;p&gt;<br>        密码：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;passwords&quot; id&#x3D;&quot;passwords&quot; onblur&#x3D;&quot;passwordsvalidator()&quot;&gt;<br>        &lt;p id&#x3D;&quot;pswmsg&quot;&gt;&lt;&#x2F;p&gt;<br>    &lt;&#x2F;form&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>java jdbc的基本使用</title>
    <url>/2020/10/20/javadb/</url>
    <content><![CDATA[<p>今天在做java实验的时候用到了jdbc，现在顺便复习一下jdbc的操作。</p>
<h1 id="什么是JDBC"><a href="#什么是JDBC" class="headerlink" title="什么是JDBC"></a><strong>什么是JDBC</strong></h1><p>JDBC全称为 Java Database Connectivity ，jdbc可以通过载入不同的数据库的驱动程序与不同的数据库进行连接</p>
<h1 id="jdbc的使用"><a href="#jdbc的使用" class="headerlink" title="jdbc的使用"></a><strong>jdbc的使用</strong></h1><p>要想使用jdbc，首先要导入对应数据库的驱动类：</p>
<p><img src="/2020/10/20/javadb/jar.jpg" alt="jar"></p>
<p>jdbc的使用流程为：</p>
<p>1.注册驱动<br>2.获取连接<br>3.执行SQL语句<br>4.获取结果<br>5.关闭连接</p>
<h2 id="注册驱动"><a href="#注册驱动" class="headerlink" title="注册驱动"></a><strong>注册驱动</strong></h2><p>注册驱动的语句为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Class.forName(JDBC_DRIVER);<br></code></pre></td></tr></table></figure>
<p>JDBC_DRIVER为对应的数据库驱动，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">String JDBC_DRIVER &#x3D; &quot;com.mysql.cj.jdbc.Driver&quot;;<br></code></pre></td></tr></table></figure>
<p>值得注意的是Class.forName为反射中的知识，若找不到相应的类名，它会抛出一个异常，所以必须使用try-catch处理异常或者声明异常</p>
<h2 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a><strong>获取连接</strong></h2><p>获取连接的目的是获取Connection对象，可通过DriverManager类的getConnection方法获取</p>
<p>其中getConnection方法中有三个参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">getConnection(url,user,pwd);<br></code></pre></td></tr></table></figure>
<p>url为连接数据库的路径，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">String DB_URL &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;dbtest01?characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;UTC&amp;useServerPrepStmts&#x3D;true&amp;cachePrepStmts&#x3D;true&quot;;<br></code></pre></td></tr></table></figure>
<p>其中，detest01为路径上的某个数据库</p>
<p>characterEncoding=utf-8设置为中文</p>
<p>serverTimezone=UTC表示当前时区</p>
<p>useServerPrepStmts=true 表示preparedstatement进行预编译，默认preparedstatement不会进行预编译</p>
<p>cachePrepStmts=true表示缓存，当使用不同的PreparedStatement对象来执行相同的SQL语句时，还是会出现编译两次的现象，这是因为驱动没有缓存编译后的函数key，导致二次编译。</p>
<p>user和pwd分别为数据库用户名和密码</p>
<p>获取连接的方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">private static final String user &#x3D; &quot;root&quot;;<br><br>   private static final String password &#x3D; &quot;111111&quot;;<br><br>   private static final String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;dbtest01?characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;UTC&amp;useServerPrepStmts&#x3D;true&amp;cachePrepStmts&#x3D;true&quot;;<br><br>   private static final String jdbc_driver &#x3D; &quot;com.mysql.cj.jdbc.Driver&quot;;<br><br>   ...<br><br>   Class.forName(jdbc_driver);<br><br>   connection &#x3D; DriverManager.getConnection(url,user,password);<br></code></pre></td></tr></table></figure>
<h2 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a><strong>执行sql语句</strong></h2><p>JDBC执行sql语句的方式主要使用Statement对象或PreparedStatement对象</p>
<h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a><strong>Statement</strong></h3><p>要获取Statement对象，要使用Connection对象的createStatement(sql)方法</p>
<p>statement对象中有几种对数据库操作的方法：</p>
<ul>
<li>statement.execute()</li>
</ul>
<p>execute()方法返回一个boolean值，表示sql语句执行成功或者失败</p>
<ul>
<li>statement.executeQuery()</li>
</ul>
<p>对于查询类的sql语句，通常使用executeQuery()方法，该方法返回一个ResultSet结果集</p>
<ul>
<li>statement.executeUpdate()</li>
</ul>
<p>对于更新类的sql语句，通常使用executeUpdate()方法，返回结果是一个整数,表示受影响的行数</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">statement &#x3D; connection.createStatement(&quot;select * from table&quot;);<br>ResultSet resultSet &#x3D; statement.executeQuery();<br></code></pre></td></tr></table></figure>
<p><strong>要注意statement中的sql语句要将所有的数据都填充好才可以</strong></p>
<p>如执行插入语句，String sql = “insert into stu values(1,2,3);”</p>
<p>必须把数据给提前写好才可以</p>
<h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a><strong>PreparedStatement</strong></h3><p>要获取PreparedStatement对象，使用Connection对象的prepareStatement(sql)方法</p>
<p>PrepareStatement的功能与Statement相似，但不同的是，PrepareStatement可以使用占位符,它是由占位符标识需要输入数据的位置，然后再逐一填入数据。当然，PreparedStatement也可以执行没有占位符的sql语句</p>
<p>如执行插入语句，String sql = “insert into stu values(?,?,?);”</p>
<p>使用占位符后便可以在sql语句执行前再填充数据</p>
<p>要填充数据，要使用PreparedStatement对象的setXX方法</p>
<p>setXXX方法中，XXX是要填充的数据类型</p>
<p>setXXX方法中有两个参数，第一个参数是参数在表中的位置，第二个参数是参数的值</p>
<p><strong>注：第一个参数中，参数下表是从1开始的</strong></p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">String sql &#x3D; &quot;insert into stu values(?,?,?);&quot;;<br><br>PreparedStatement statement &#x3D; connection.prepareStatement(sql);<br><br>statement.setInt(1,no);<br><br>statement.setString(2,name);<br><br>statement.setInt(3,age);<br></code></pre></td></tr></table></figure>
<p>在获取了statement对象后，便可调用想使用的执行方法执行sql语句</p>
<h2 id="获取结果"><a href="#获取结果" class="headerlink" title="获取结果"></a><strong>获取结果</strong></h2><p>sql语句的返回结果是一个结果集，ResultSet主要用于存储结果集，可以通过next()方法由前向后逐个获取结果集中的数据</p>
<p>在resultset中，可以使用getXXX(index)获得下标为index的值，或者使用getXXX(“property_name”)通过属性名获得相应的值，其中XXX为数据类型</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">statement.executeQuery();<br>ResultSet resultSet &#x3D; statement.getResultSet();<br>while(resultSet.next())&#123;<br>       int sno &#x3D; resultSet.getInt(&quot;sno&quot;);<br>       String sname &#x3D; resultSet.getString(&quot;sname&quot;);<br>       System.out.println(sno + sname);<br>   &#125;<br></code></pre></td></tr></table></figure>
<p><strong>注：要想获得resultSet中的数据，首先要使用resultSet.next()方法，否则会报错</strong></p>
<h2 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a><strong>关闭连接</strong></h2><p>在执行完数据库操作后，通常要关闭和数据库的连接</p>
<p>使用.close()关闭连接，通常放在finally中执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">resultSet.close();<br>statement.close();<br>connection.close();<br></code></pre></td></tr></table></figure>

<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a><strong>事务</strong></h1><p>把一系列要执行的操作称为事务，而事务管理就是管理这些操作要么完全执行，要么完全不执行，所有命令全部成功执行才意味着该事务的成功，任何一个命令失败都意味着该事务的失败。</p>
<h2 id="事务管理的特性"><a href="#事务管理的特性" class="headerlink" title="事务管理的特性"></a><strong>事务管理的特性</strong></h2><p>原子性：事务的整个操作是一个整体，不可以分割，要么都做，要么都不做。</p>
<p>一致性：事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p>
<p>隔离性：当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p>
<p>持久性：事务一旦被提交了，那么对数据库中的数据的改变就是永久性的</p>
<h2 id="JDBC中事务管理操作"><a href="#JDBC中事务管理操作" class="headerlink" title="JDBC中事务管理操作"></a><strong>JDBC中事务管理操作</strong></h2><p>JDBC中，Connection有三个方法与事务操作有关</p>
<ul>
<li>setAutoCommit(boolean)</li>
</ul>
<p>要想进行事务管理，在进行相应的sql操作之前，要执行：</p>
<pre><code>connection.setAutoCommit(false);</code></pre>
<p>取消事务的自动提交，setAutoCommit的默认值为true</p>
<ul>
<li>commit()</li>
</ul>
<p>commit表示提交事务</p>
<ul>
<li>rollback()</li>
</ul>
<p>rollbakc表示回滚，通常在处理异常或出现错误的时候进行</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>数据库</tag>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC Cannot resolve reference to bean &#39;cacheManager&#39;异常解决</title>
    <url>/2020/10/12/mvcwrong/</url>
    <content><![CDATA[<p>在新建的MVC项目中，要想使用注解驱动，出现异常信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">12-Oct-2020 17:43:10.828 警告 [RMI TCP Connection(21)-127.0.0.1] org.springframework.web.context.support.XmlWebApplicationContext.refresh Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;org.springframework.cache.interceptor.CacheInterceptor#0&#39;: Cannot resolve reference to bean &#39;cacheManager&#39; while setting bean property &#39;cacheManager&#39;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &#39;cacheManager&#39; available<br>12-Oct-2020 17:43:10.830 严重 [RMI TCP Connection(21)-127.0.0.1] org.springframework.web.servlet.DispatcherServlet.initServletBean Context initialization failed<br>	org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;org.springframework.cache.interceptor.CacheInterceptor#0&#39;: Cannot resolve reference to bean &#39;cacheManager&#39; while setting bean property &#39;cacheManager&#39;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &#39;cacheManager&#39; available<br>		at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:342)<br>		at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113)<br>		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1699)<br>		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1444)<br>		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)<br>		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)<br>		at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)<br>		at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)<br>		at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)<br>		at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)<br>		at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)<br>		at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)<br>		at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)<br>		at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:702)<br>		at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:668)<br>		at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:716)<br>		at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:591)<br>		at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:530)<br>		at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:170)<br>		at javax.servlet.GenericServlet.init(GenericServlet.java:158)<br>		at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1134)<br>		at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1089)<br>		at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:983)<br>		at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4864)<br>		at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5173)<br>		at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)<br>		at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:717)<br>		at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:690)<br>		at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:706)<br>		at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1727)<br>		at java.base&#x2F;jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>		at java.base&#x2F;jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>		at java.base&#x2F;jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>		at java.base&#x2F;java.lang.reflect.Method.invoke(Method.java:564)<br>		at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:288)<br>		at java.management&#x2F;com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:809)<br>		at java.management&#x2F;com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)<br>		at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:456)<br>		at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:405)<br>		at java.base&#x2F;jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>		at java.base&#x2F;jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>		at java.base&#x2F;jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>		at java.base&#x2F;java.lang.reflect.Method.invoke(Method.java:564)<br>		at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:288)<br>		at java.management&#x2F;com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:809)<br>		at java.management&#x2F;com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)<br>		at java.management&#x2F;com.sun.jmx.remote.security.MBeanServerAccessController.invoke(MBeanServerAccessController.java:468)<br>		at java.management.rmi&#x2F;javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1466)<br>		at java.management.rmi&#x2F;javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1307)<br>		at java.base&#x2F;java.security.AccessController.doPrivileged(AccessController.java:691)<br>		at java.management.rmi&#x2F;javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1406)<br>		at java.management.rmi&#x2F;javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:827)<br>		at java.base&#x2F;jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>		at java.base&#x2F;jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>		at java.base&#x2F;jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>		at java.base&#x2F;java.lang.reflect.Method.invoke(Method.java:564)<br>		at java.rmi&#x2F;sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)<br>		at java.rmi&#x2F;sun.rmi.transport.Transport$1.run(Transport.java:200)<br>		at java.rmi&#x2F;sun.rmi.transport.Transport$1.run(Transport.java:197)<br>		at java.base&#x2F;java.security.AccessController.doPrivileged(AccessController.java:691)<br>		at java.rmi&#x2F;sun.rmi.transport.Transport.serviceCall(Transport.java:196)<br>		at java.rmi&#x2F;sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)<br>		at java.rmi&#x2F;sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)<br>		at java.rmi&#x2F;sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)<br>		at java.base&#x2F;java.security.AccessController.doPrivileged(AccessController.java:391)<br>		at java.rmi&#x2F;sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)<br>		at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)<br>		at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)<br>		at java.base&#x2F;java.lang.Thread.run(Thread.java:832)<br>	Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &#39;cacheManager&#39; available<br>		at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:805)<br>		at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1278)<br>		at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:297)<br>		at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:276)<br>		at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)<br>		at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330)<br>		... 68 more<br></code></pre></td></tr></table></figure>
<p>解决方案：</p>
<p>在配置Dispatcher的xml文件中，   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;mvc:annotation-driven&gt;&lt;&#x2F;mvc:annotation-driven&gt;<br></code></pre></td></tr></table></figure>
<p>使用错误</p>
<p>因为annotation-driven有几个同名的</p>
<p><img src="/2020/10/12/mvcwrong/driven.jpg" alt="driven"></p>
<p>如果要选择注解驱动，要选择第三个</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring AOP的两种实现方式（XML、AspectJ）</title>
    <url>/2020/09/25/AOP/</url>
    <content><![CDATA[<h2 id="基于XML配置的AOP实例："><a href="#基于XML配置的AOP实例：" class="headerlink" title="基于XML配置的AOP实例："></a>基于XML配置的AOP实例：</h2><p>要使用配置实现AOP编程，要在xml文件中使用<a href="aop:config">aop:config</a>来声明，这种声明方式使用了大量的自动代理方式<br><strong>注：环境可能会缺少必要的包，如aopalliance.jar、aspectweaver.jar</strong></p>
<p>在<a href="aop:config">aop:config</a>中使用&lt;aop:aspect id=”” ref=””&gt;来配置一个切面，&lt;aop:pointcut id expression/&gt;来配置一个切入点，&lt;aop:before(or other) method=”” pointcut=””&gt;配置一个增强，这三个就组成了一个完整的切面</p>
<p>下面介绍如何配置一个切面和切面中的几种增强</p>
<p>定义一个业务类ServiceClass：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Component<br>public class ServiceClass &#123;<br>    public void service()&#123;<br>        System.out.println(&quot;this is service&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>定义一个MyAspect切面类，生成配置文件newcontext.xml，其中，MyAspect类使用Component注解配置</p>
<h3 id="before"><a href="#before" class="headerlink" title="before"></a>before</h3><p><strong>before是业务方法执行前进行的操作</strong></p>
<p>在切面类中添加before方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Component<br>public class MyAspect &#123;<br>    public void before()&#123;<br>        System.out.println(&quot;MyAspect&#39;s before&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>newcontext.xml文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;<br>       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;<br>       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;<br>       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;<br>    &lt;context:component-scan base-package&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;context:component-scan&gt;<br>    &lt;aop:config&gt;<br>        &lt;aop:aspect id&#x3D;&quot;aspect&quot; ref&#x3D;&quot;myAspect&quot;&gt;<br>            &lt;aop:pointcut id&#x3D;&quot;pointcut&quot; expression&#x3D;&quot;execution(* newdemo.ServiceClass.*(..))&quot;&#x2F;&gt;<br>            &lt;aop:before method&#x3D;&quot;before&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&gt;&lt;&#x2F;aop:before&gt;<br>        &lt;&#x2F;aop:aspect&gt;<br>    &lt;&#x2F;aop:config&gt;<br>&lt;&#x2F;beans&gt;<br></code></pre></td></tr></table></figure>
<p>其中，切点中的expression的含义为：切点为newdemo.ServiceClass这个包中的所有方法</p>
<p>测试类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        ServiceClass serviceClass &#x3D; (ServiceClass)applicationContext.getBean(&quot;serviceClass&quot;);<br>        serviceClass.service();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<p>MyAspect’s before<br>this is service</p>
<h3 id="after"><a href="#after" class="headerlink" title="after"></a>after</h3><p><strong>业务方法执行完毕进行的操作，通常用于释放资源</strong></p>
<p>在切面类中添加after方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public void after()&#123;<br>        System.out.println(&quot;MyAspect&#39;s after&quot;);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>添加配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;aop:after method&#x3D;&quot;after&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&gt;&lt;&#x2F;aop:after&gt;<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<p>MyAspect’s before<br>this is service<br>MyAspect’s after</p>
<h3 id="after-returing"><a href="#after-returing" class="headerlink" title="after-returing"></a>after-returing</h3><p><strong>after-returing是业务方法返回前进行的操作</strong></p>
<p>在切面类中添加after-returning方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public void afterReturning()&#123;<br>        System.out.println(&quot;MyAspect&#39;s afterReturning&quot;);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>添加配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;aop:after-returning method&#x3D;&quot;afterReturning&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&gt;&lt;&#x2F;aop:after-returning&gt;<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<p>MyAspect’s before<br>this is service<br>MyAspect’s after<br>MyAspect’s afterReturning</p>
<h3 id="after-throwing"><a href="#after-throwing" class="headerlink" title="after-throwing"></a>after-throwing</h3><p><strong>after-throwing是业务方法抛出异常后进行的操作</strong></p>
<p>切面类添加afterthrowing方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public void afterThrowing()&#123;<br>       System.out.println(&quot;MyAspect&#39;s afterThrowing&quot;);<br>   &#125;<br></code></pre></td></tr></table></figure>
<p>在业务类ServiceClass的service方法中抛出异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public void service() throws Exception&#123;<br>       System.out.println(&quot;this is service&quot;);<br>       throw new Exception();<br>   &#125;<br></code></pre></td></tr></table></figure>
<p>添加配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;aop:after-throwing method&#x3D;&quot;afterThrowing&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&gt;&lt;&#x2F;aop:after-throwing&gt;<br></code></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        ServiceClass serviceClass &#x3D; (ServiceClass)applicationContext.getBean(&quot;serviceClass&quot;);<br>        try &#123;<br>            serviceClass.service();<br>        &#125;<br>        catch (Exception e)&#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<p>MyAspect’s before<br>this is service<br>MyAspect’s after<br>MyAspect’s afterThrowing</p>
<h3 id="around"><a href="#around" class="headerlink" title="around"></a>around</h3><p><strong>around：Advice最强操作，可以综合前面四种advice</strong></p>
<p>around方法必须有Object返回值，且第一个形参必须为ProceedingJoinPoint类型，around既可以在执行业务方法之前增强动作，也能在执行业务方法之后进行增强的执行，around增强可以决定业务方法在什么时候执行，在around方法体内，只有调用ProceedingJoinPoint参数的procedd()方法才会执行业务方法</p>
<p>在切面类中添加around方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public Object around(ProceedingJoinPoint pjp)&#123;<br>    Object object &#x3D; null;<br>    try&#123;<br>        object &#x3D; pjp.proceed();<br>        System.out.println(&quot;MyAspect&#39;s around&quot;);<br>    &#125;<br>    catch (Throwable throwable) &#123;<br><br>    &#125;<br>    return object;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>添加配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;<br>       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;<br>       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;<br>       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;<br>    &lt;context:component-scan base-package&#x3D;&quot;newdemo&quot;&gt;&lt;&#x2F;context:component-scan&gt;<br>    &lt;aop:config&gt;<br>        &lt;aop:aspect id&#x3D;&quot;aspect&quot; ref&#x3D;&quot;myAspect&quot;&gt;<br>            &lt;aop:pointcut id&#x3D;&quot;pointcut&quot; expression&#x3D;&quot;execution(* newdemo.ServiceClass.*(..))&quot;&#x2F;&gt;<br>            &lt;aop:around method&#x3D;&quot;around&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&gt;&lt;&#x2F;aop:around&gt;<br>        &lt;&#x2F;aop:aspect&gt;<br>    &lt;&#x2F;aop:config&gt;<br>&lt;&#x2F;beans&gt;<br><br></code></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>   public static void main(String[] args) &#123;<br>       ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>       ServiceClass serviceClass &#x3D; (ServiceClass)applicationContext.getBean(&quot;serviceClass&quot;);<br>       serviceClass.service();<br>   	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<p>this is service<br>MyAspect’s around</p>
<p>改变around方法中两条语句的位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">System.out.println(&quot;MyAspect&#39;s around&quot;);<br>   object &#x3D; pjp.proceed();<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<p>MyAspect’s around<br>this is service</p>
<p>说明只有在执行ProceedingJoinPoint对象的proceed方法后，才会执行业务方法</p>
<ul>
<li>advice-parameters：可以往增强方法中传入业务方法中的参数，在切入点配置好参数类型和属性名即可</li>
</ul>
<p><strong>下面用around来模拟前面的advice</strong></p>
<p>切面类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Component<br>public class MyAspect &#123;<br>    public Object around(ProceedingJoinPoint pjp)&#123;<br>        Object object &#x3D; null;<br>        System.out.println(&quot;before&quot;);       &#x2F;&#x2F;此时还未执行pjp的proceed方法，业务方法不会执行，所以相当于实现advice增强<br>        try&#123;<br>            object &#x3D; pjp.proceed();<br>        &#125;<br>        catch (Throwable throwable) &#123;       &#x2F;&#x2F;pjp.proceed()方法若捕捉异常，则说明业务方法会抛出一个异常<br>        &#125;<br>        finally &#123;<br>        	System.out.println(&quot;after&quot;);    &#x2F;&#x2F;此时捕捉异常，业务方法执行完毕，所以相当于实现after增强<br>        &#125;<br>        System.out.println(&quot;after throwing&quot;);   &#x2F;&#x2F;这就模拟after-throwing增强<br>        return object;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;<br>       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;<br>       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;<br>       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;<br>    &lt;context:component-scan base-package&#x3D;&quot;newdemo&quot;&gt;&lt;&#x2F;context:component-scan&gt;<br>    &lt;aop:config&gt;<br>        &lt;aop:aspect id&#x3D;&quot;aspect&quot; ref&#x3D;&quot;myAspect&quot;&gt;<br>            &lt;aop:pointcut id&#x3D;&quot;pointcut&quot; expression&#x3D;&quot;execution(* newdemo.ServiceClass.*(..))&quot;&#x2F;&gt;<br>            &lt;aop:around method&#x3D;&quot;around&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&gt;&lt;&#x2F;aop:around&gt;<br>        &lt;&#x2F;aop:aspect&gt;<br>    &lt;&#x2F;aop:config&gt;<br>&lt;&#x2F;beans&gt;<br></code></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        ServiceClass serviceClass &#x3D; (ServiceClass)applicationContext.getBean(&quot;serviceClass&quot;);<br>        try &#123;<br>            serviceClass.service();<br>        &#125;<br>        catch (Exception e)&#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<p>before<br>this is service<br>after<br>after throwing</p>
<h3 id="advice-parameters"><a href="#advice-parameters" class="headerlink" title="advice-parameters"></a>advice-parameters</h3><p>在pointcut的expression中指定方法参数，可以获取业务方法中的参数，从而使增强方法中能使用这些参数</p>
<p>ServiceClass类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">	@Component<br>	public class ServiceClass &#123;<br>	    public void parametersService(String name,int age)&#123;<br>	        System.out.println(&quot;parametersService&#39;s&quot;+name+&quot; &quot;+age);<br>	    &#125;<br>	&#125;<br>&#96;&#96;&#96;	<br>切面类中添加ParametersMethod方法：<br></code></pre></td></tr></table></figure>
<pre><code>public void ParametersMethod(String name,int age)&#123;
    System.out.println(&quot;ParametersMethod&#39;s&quot;+name+&quot; &quot;+age);
&#125;</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">添加配置：<br></code></pre></td></tr></table></figure>
<pre><code>&lt;aop:before method=&quot;ParametersMethod&quot; pointcut=&quot;execution(* newdemo.ServiceClass.parametersService(String,int)) and args(name,age)&quot;&gt;&lt;/aop:before&gt;</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">测试：<br></code></pre></td></tr></table></figure>
<pre><code>public class TestClass &#123;
    public static void main(String[] args) &#123;
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);
        ServiceClass serviceClass = (ServiceClass)applicationContext.getBean(&quot;serviceClass&quot;);
        serviceClass.parametersService(&quot;zzzz&quot;,21);
    &#125;
&#125;</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">输出结果<br><br>ParametersMethod&#39;szzzz 21<br>parametersService&#39;szzzz 21<br><br><br>### Introduction 引入<br><br>Introduction允许将一个切面声明一个实现指定接口的通知对象，并且提供了一个接口实现类来代表这些对象<br><br>由 &lt;aop: declare-parents&gt;元素声明 <br><br>定义一个MyInterface接口<br></code></pre></td></tr></table></figure>
<pre><code>public interface MyInterface &#123;
    public void show();
&#125;</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">接口实现类MyInterfaceImpl<br></code></pre></td></tr></table></figure>
<pre><code>public class MyInterfaceImpl implements MyInterface&#123;
    @Override
    public void show() &#123;
        System.out.println(&quot;this is my interface&quot;);
    &#125;
&#125;</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">添加配置：<br></code></pre></td></tr></table></figure>
<pre><code>aop:declare-parents types-matching=&quot;newdemo.ServiceClass&quot; implement-interface=&quot;newdemo.MyInterface&quot;
                             default-impl=&quot;newdemo.MyInterfaceImpl&quot;&gt;&lt;/aop:declare-parents&gt;</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">测试类：<br></code></pre></td></tr></table></figure>
<pre><code>public class TestClass &#123;
    public static void main(String[] args) &#123;
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);
        MyInterface myInterface = (MyInterface)applicationContext.getBean(&quot;serviceClass&quot;);
        myInterface.show();
    &#125;
&#125;</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">输出结果：<br>	<br>this is my interface<br><br>introduction的作用是强行为ServiceClass添加一个父类，即MyInterface接口，由ServiceClass作为接口的实现类<br><br><br>## 基于@AspectJ注解的AOP实例<br><br>@AspectJ是预编译的AOP实现方式，@AspecJ的风格类似纯java注解的普通java类，@AspectJ是指明aspects的另一种风格，像基于注解的IOC一样，基于注解的配置能让开发变得更加方便。<br><br>对@AspectJ的支持可以使用XML或java注释风格的配置，两种方法的作用是一样的<br><br>* 使用XMl，要在配置文件中加上<br>&#96;&#96;&#96;	<br>	&lt;aop: aspectj-autoproxy&gt;&lt;&#x2F;aop: aspectj-autoproxy&gt;<br></code></pre></td></tr></table></figure>
<ul>
<li>java注释风格的配置</li>
</ul>
<p>在切面类中添加注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Configuration<br>@EnableAspectJAutoProxy<br></code></pre></td></tr></table></figure>
<p><strong>下面使用XML文件配置的方式。</strong></p>
<p>实现一个业务类ServiceCLass</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class ServiceCLass &#123;<br>	    public void service()&#123;<br>       	System.out.println(&quot;service&quot;);<br>   	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>生成配置文件AspectJContext.xml：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;<br>       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;<br>       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;<br>       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;<br><br>    &lt;context:component-scan base-package&#x3D;&quot;NewAspectJ&quot;&gt;&lt;&#x2F;context:component-scan&gt;<br>    &lt;aop:aspectj-autoproxy&gt;&lt;&#x2F;aop:aspectj-autoproxy&gt;<br>&lt;&#x2F;beans&gt;<br></code></pre></td></tr></table></figure>

<h3 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a>@Aspect</h3><p>拥有@Aspect的任何bean都会被Spring自动识别并应用</p>
<p>用@Aspect注解的类可以有字段和方法，也可以有切入点、通知、引入等</p>
<p>@Aspect要和@Component一起使用，@Component是自动配置一个bean，而@Aspect是自动将这个bean配置为切面（或者在XML中手动配置bean）</p>
<p>定义切面类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Component<br>@Aspect<br>public class MyAspect &#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="Pointcut"><a href="#Pointcut" class="headerlink" title="@Pointcut"></a>@Pointcut</h3><p>@Pointcut = 表达式+签名</p>
<p><strong>@Pointcut的表达式标签有10中：</strong></p>
<ul>
<li>execution：用于匹配方法执行的连接点</li>
<li>within：用于匹配指定类型内的方法执行</li>
<li>this：用于匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配</li>
<li>target：用于匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配</li>
<li>args：用于匹配当前执行的方法传入的参数为指定类型的执行方法</li>
<li>@within：用于匹配所以持有指定注解类型内的方法</li>
<li>@target：用于匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解</li>
<li>@args：用于匹配当前执行的方法传入的参数持有指定注解的执行</li>
<li>@annotation：用于匹配当前执行方法持有指定注解的方法</li>
<li>bean：SpringAOP扩展的，AspectJ没有对于指示符，用于匹配特定名称的Bean对象的执行方法</li>
</ul>
<p>切入点使用@Pointcut对方法进行注解，方法返回类型必须为void，@Pointcut实际上是将方法名作为切入点的一个签名，即方法名=切入点id</p>
<p>在切面类中添加pointcut签名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Component<br>@Aspect<br>public class MyAspect &#123;<br>    <br>    @Pointcut(&quot;execution(* NewAspectJ.ServiceCLass.service(..))&quot;)<br>    public void pointcut()&#123;&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<p>等效于在配置文件中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;aop:pointcut id&#x3D;&quot;pointcut&quot; expression&#x3D;&quot;execution(* NewAspectJ.ServiceCLass.service(..))&quot;&#x2F;&gt;<br></code></pre></td></tr></table></figure>
<p>Pointcut定义时，还可以使用&amp;&amp;、||、！这三种运算</p>
<pre><code>@Pointcut(&quot;within(NewAspectJ.ServiceCLass)&quot;)
public void pointcut1()&#123;&#125;
@Pointcut(&quot;execution(public * *(..))&quot;)
public void pointcut2()&#123;&#125;
@Pointcut(&quot;pointcut1()&amp;&amp;pointcut2()&quot;)
public void pointcut3()&#123;&#125;</code></pre>
<p>pointcut3表示切点为NewAspect.ServiceClass类中的所有public方法</p>
<h3 id="Adivce"><a href="#Adivce" class="headerlink" title="@Adivce"></a>@Adivce</h3><ul>
<li>@Before</li>
</ul>
<p>在切面类中添加before方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Before(&quot;pointcut()&quot;)<br>   public void before()&#123;<br>       System.out.println(&quot;before&quot;);<br>   &#125;<br></code></pre></td></tr></table></figure>
<p>等效于在配置文件中的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;aop:before method&#x3D;&quot;before&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&gt;&lt;&#x2F;aop:before&gt;<br></code></pre></td></tr></table></figure>
<p>在测试类TestClass中测试，输出</p>
<p>before<br>service</p>
<p>其他advice同理</p>
<ul>
<li>@AfterReturning</li>
</ul>
<p>有时候需要在通知体内得到返回的实际值，可使用@AfterReturning绑定返回值的形式</p>
<p>在业务类中添加serviceResult方法，用于返回result值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public String serviceResult()&#123;<br>       return &quot;success&quot;;<br>   &#125;<br></code></pre></td></tr></table></figure>
<p>在切面类中添加新的切点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Pointcut(&quot;execution(* NewAspectJ.ServiceClass.serviceResult(..))&quot;)<br>   public void pointcut4()&#123;&#125;<br></code></pre></td></tr></table></figure>
<p>切面类中添加AfterReturning方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@AfterReturning(&quot;pointcut4(),returning &#x3D; &quot;Result&quot;&quot;)<br>public void AfterReturning(String Result)&#123;<br>    System.out.println(&quot;AfterReturning &#39;s &quot; + Result);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<pre><code>AfterReturning &#39;s success</code></pre>
<ul>
<li>@AfterThrowing</li>
</ul>
<p>有时候需要在通知体内得到抛出的异常，可使用像@AfterReturning那样的绑定返回值的形式</p>
<p>在service方法中抛出异常</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public void service() throws Exception&#123;<br>        System.out.println(&quot;service&quot;);<br>        throw new Exception(&quot;failed&quot;);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>切面类添加AfterThrowing方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@AfterThrowing(value &#x3D; &quot;pointcut()&quot;,throwing &#x3D; &quot;e&quot;)<br>   public void AfterThrowing(Exception e)&#123;<br>       System.out.println(e.getMessage());<br>   &#125;<br></code></pre></td></tr></table></figure>
<p>结果：</p>
<pre><code>before
service
failed</code></pre>
<ul>
<li><p>@After<br>与aop::after相同</p>
</li>
<li><p>@Around<br>与aop:around相同</p>
</li>
<li><p>@给advice传递参数</p>
</li>
</ul>
<p>在advice中使用advice(pointcut&amp;&amp;args)的方式将参数传给advice，若有重载方法，则会自动根据参数匹配</p>
<p>也可以使用Around中的ProceedingJoinPoint对象的getArgs方法返回参数数组</p>
<p>业务类中重载service方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public void service(String users,String passwords)&#123;<br>       System.out.println(&quot;service &#39;s &quot; + users + &quot; &quot;+passwords);<br>   &#125;<br></code></pre></td></tr></table></figure>
<p>切面类实现around的advice：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Around(&quot;pointcut()&amp;&amp;args(users,passwords)&quot;)<br>   public Object Around(ProceedingJoinPoint pjp,String users,String passwords)&#123;<br>       Object object &#x3D; null;<br>       System.out.println(&quot;Around&#39;s &quot; + users +&quot; &quot; + passwords);<br>       try&#123;<br>           object &#x3D; pjp.proceed();<br>           Object[] objects &#x3D; pjp.getArgs();<br>           System.out.println(&quot;也可以通过pjp.getArgs()获得参数&quot;);<br>           System.out.println(Arrays.toString(objects));<br>       &#125;<br>       catch (Throwable e)&#123;<br><br>       &#125;<br>       return object;<br>   &#125;<br></code></pre></td></tr></table></figure>
<p>测试结果：</p>
<p>Around’s 123 123<br>before<br>service ‘s 123 123<br>也可以通过pjp.getArgs()获得参数<br>[123, 123]</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>AOP</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring之控制反转（IOC）</title>
    <url>/2020/09/24/IOC/</url>
    <content><![CDATA[<h2 id="IOC控制反转："><a href="#IOC控制反转：" class="headerlink" title="IOC控制反转："></a><strong>IOC控制反转：</strong></h2><h3 id="IOC案例："><a href="#IOC案例：" class="headerlink" title="IOC案例："></a><strong>IOC案例：</strong></h3><p>接口UserInterface：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public interface UserInterface &#123;<br>   	public void use();<br>&#125;<br></code></pre></td></tr></table></figure>
<p>接口UserInterface的实现类 UserImpl：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class UserImpl implements UserInterface&#123;<br>   @Override<br>   	public void use() &#123;<br>       	System.out.println(&quot;User using!&quot;);<br>   	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>测试类 TextClass：</p>
<!--     import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext; -->
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TextClass &#123;<br>   	public static void main(String[] args) &#123;<br>        UserInterface userInterface &#x3D; new UserImpl();<br>        userInterface.use();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<p>User using！</p>
<p>在使用IOC之前，我们一直是在程序中直接使用new来生成一个对象，但在IOC中，我们不需要在程序中使用new来创建对象，而是通过配置XML文件，把所需要的类写入XML文件中，由Spring来管理和获取对象</p>
<p>将TextCLass中程序改一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import org.springframework.context.ApplicationContext;<br>import org.springframework.context.support.ClassPathXmlApplicationContext;<br>public class TextClass &#123;<br>    public static void main(String[] args) &#123;<br>        String xmlPath &#x3D; &quot;ApplicationContext.xml&quot;;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(xmlPath);<br>        UserInterface userInterface &#x3D; (UserInterface)applicationContext.getBean(&quot;UserId&quot;);<br>        userInterface.use();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>同时创建ApplicationContext.XML文件，并配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;<br>       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;<br><br>    &lt;bean id&#x3D;&quot;UserId&quot; class&#x3D;&quot;UserImpl&quot;&gt;&lt;&#x2F;bean&gt;<br>&lt;&#x2F;beans&gt;<br></code></pre></td></tr></table></figure>
<p>运行TextCLass，输出结果为：</p>
<p>User using！</p>
<p>这时候，我们在程序中<strong>由主动创建类</strong>转变为<strong>通过Spring管理和获取类</strong>，这一转变称为控制反转</p>
<hr>
<h2 id="DI依赖注入"><a href="#DI依赖注入" class="headerlink" title="DI依赖注入"></a><strong>DI依赖注入</strong></h2><p>在IOC中，我们实现了控制反转，产生了依赖，但在程序运行过程中，我们经常需要动态地向某个对象提供它所需要的其他类，这就需要用到依赖注入DI，要想实现依赖注入，我们必须在需要其他类的某个对象中提供一种渠道（方法）来将依赖注入，最后在XML文件中进行相应的配置</p>
<p>依赖注入通常有三种方法：</p>
<ul>
<li><p>Setter方法注入</p>
</li>
<li><p>构造方法注入</p>
</li>
<li><p>接口注入</p>
</li>
</ul>
<p>下面主要介绍前两种方法</p>
<h3 id="DI案例："><a href="#DI案例：" class="headerlink" title="DI案例："></a><strong>DI案例：</strong></h3><p>添加一个MyClass类，类中有私有成员 userInterface</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class MyInterface &#123;<br>   	private UserInterface userInterface;<br>   	public void show()&#123;<br>   	    userInterface.use();<br>   	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h4 id="Setter方法注入"><a href="#Setter方法注入" class="headerlink" title="Setter方法注入"></a><strong>Setter方法注入</strong></h4><p>在类中添加Setter方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class MyClass &#123;<br>    private UserInterface userInterface;<br>    public void show()&#123;<br>        userInterface.use();<br>    &#125;<br>    public void setUserInterface(UserInterface userInterface)&#123;<br>        this.userInterface &#x3D; userInterface;<br>   	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>配置XML文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;<br>      xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>      xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;<br>   &lt;bean id&#x3D;&quot;UserId&quot; class&#x3D;&quot;UserImpl&quot;&gt;&lt;&#x2F;bean&gt;<br>   &lt;bean id&#x3D;&quot;MyClassId&quot; class&#x3D;&quot;MyClass&quot;&gt;<br>       &lt;property name&#x3D;&quot;userInterface&quot; ref&#x3D;&quot;UserId&quot;&gt;&lt;&#x2F;property&gt;<br>   &lt;&#x2F;bean&gt;<br>&lt;&#x2F;beans&gt;<br></code></pre></td></tr></table></figure>
<p>TextClass类中进行测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import org.springframework.context.ApplicationContext;<br>import org.springframework.context.support.ClassPathXmlApplicationContext;<br>public class TextClass &#123;<br>    public static void main(String[] args) &#123;<br>        String xmlPath &#x3D; &quot;ApplicationContext.xml&quot;;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(xmlPath);<br>        MyInterface myInterface &#x3D; (MyInterface)applicationContext.getBean(&quot;MyInterfaceId&quot;);<br>        myInterface.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果为：</p>
<p>User using！</p>
<h4 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a><strong>构造方法注入</strong></h4><p>在MyClass类中添加构造函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class MyClass &#123;<br>    private UserInterface userInterface;<br>    public void show()&#123;<br>        userInterface.use();<br>    &#125;<br>    public MyClass()&#123;&#125;<br>&#x2F;&#x2F;    构造方法注入<br>    public MyClass(UserInterface userInterface)&#123;<br>        this.userInterface &#x3D; userInterface;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>配置XML文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;<br>       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;<br>    &lt;bean id&#x3D;&quot;UserId&quot; class&#x3D;&quot;UserImpl&quot;&gt;&lt;&#x2F;bean&gt;<br>    &lt;bean id&#x3D;&quot;MyClassId&quot; class&#x3D;&quot;MyClass&quot;&gt;<br>        &lt;constructor-arg index&#x3D;&quot;0&quot; ref&#x3D;&quot;UserId&quot;&gt;&lt;&#x2F;constructor-arg&gt;<br>    &lt;&#x2F;bean&gt;<br>&lt;&#x2F;beans&gt;<br></code></pre></td></tr></table></figure>
<p>如果有多个属性，index则按照从0…n进行配置</p>
<p>运行TextCLass，输出结果：</p>
<p>User Using！</p>
<h3 id="DI中属性的依赖注入"><a href="#DI中属性的依赖注入" class="headerlink" title="DI中属性的依赖注入"></a><strong>DI中属性的依赖注入</strong></h3><p>以setter方法注入为例：</p>
<p>新建一个User类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import java.util.*;<br><br>public class User &#123;<br>    private String id;<br>    private String name;<br>    private String[] strings &#x3D; new String[10];<br>    private List&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();<br>    private Set&lt;String&gt; set &#x3D; new HashSet&lt;&gt;();<br>    private Map&lt;String,Integer&gt; map &#x3D; new HashMap&lt;&gt;();<br><br>    public void setId(String id) &#123;<br>        this.id &#x3D; id;<br>    &#125;<br><br>    public void setName(String name) &#123;<br>        this.name &#x3D; name;<br>    &#125;<br><br>    public void setStrings(String[] strings) &#123;<br>        this.strings &#x3D; strings;<br>    &#125;<br><br>    public void setList(List&lt;String&gt; list) &#123;<br>        this.list &#x3D; list;<br>    &#125;<br><br>    public void setSet(Set&lt;String&gt; set) &#123;<br>        this.set &#x3D; set;<br>    &#125;<br><br>    public void setMap(Map&lt;String, Integer&gt; map) &#123;<br>        this.map &#x3D; map;<br>    &#125;<br><br>    public Map&lt;String, Integer&gt; getMap() &#123;<br>        return map;<br>    &#125;<br><br>    public Set&lt;String&gt; getSet() &#123;<br>        return set;<br>    &#125;<br><br>    public List&lt;String&gt; getList() &#123;<br>        return list;<br>    &#125;<br><br>    public String[] getStrings() &#123;<br>        return strings;<br>    &#125;<br><br>    public String getName() &#123;<br>        return name;<br>    &#125;<br><br>    public String getId() &#123;<br>        return id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>配置XML文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;<br>      xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>      xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;<br><br>   &lt;bean id&#x3D;&quot;UserId&quot; class&#x3D;&quot;User&quot;&gt;<br>       &lt;property name&#x3D;&quot;id&quot; value&#x3D;&quot;20185625&quot;&gt;&lt;&#x2F;property&gt;<br>       &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;zl&quot;&gt;&lt;&#x2F;property&gt;<br>       &lt;property name&#x3D;&quot;strings&quot;&gt;<br>           &lt;array&gt;<br>               &lt;value&gt;&quot;11&quot;&lt;&#x2F;value&gt;<br>               &lt;value&gt;&quot;22&quot;&lt;&#x2F;value&gt;<br>               &lt;value&gt;&quot;33&quot;&lt;&#x2F;value&gt;<br>           &lt;&#x2F;array&gt;<br>       &lt;&#x2F;property&gt;<br>       &lt;property name&#x3D;&quot;list&quot;&gt;<br>           &lt;list&gt;<br>               &lt;value&gt;&quot;44&quot;&lt;&#x2F;value&gt;<br>               &lt;value&gt;&quot;55&quot;&lt;&#x2F;value&gt;<br>               &lt;value&gt;&quot;66&quot;&lt;&#x2F;value&gt;<br>           &lt;&#x2F;list&gt;<br>       &lt;&#x2F;property&gt;<br><br>       &lt;property name&#x3D;&quot;set&quot;&gt;<br>           &lt;set&gt;<br>               &lt;value&gt;&quot;77&quot;&lt;&#x2F;value&gt;<br>               &lt;value&gt;&quot;88&quot;&lt;&#x2F;value&gt;<br>               &lt;value&gt;&quot;99&quot;&lt;&#x2F;value&gt;<br>           &lt;&#x2F;set&gt;<br>       &lt;&#x2F;property&gt;<br><br>       &lt;property name&#x3D;&quot;map&quot;&gt;<br>           &lt;map&gt;<br>               &lt;entry key&#x3D;&quot;111&quot; value&#x3D;&quot;111&quot;&gt;&lt;&#x2F;entry&gt;<br>               &lt;entry key&#x3D;&quot;222&quot; value&#x3D;&quot;222&quot;&gt;&lt;&#x2F;entry&gt;<br>           &lt;&#x2F;map&gt;<br>       &lt;&#x2F;property&gt;<br><br>   &lt;&#x2F;bean&gt;<br>&lt;&#x2F;beans&gt;<br></code></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import org.springframework.context.ApplicationContext;<br>import org.springframework.context.support.ClassPathXmlApplicationContext;<br><br>import java.util.Arrays;<br><br>public class TextClass &#123;<br>    public static void main(String[] args) &#123;<br>        String xmlPath &#x3D; &quot;ApplicationContext.xml&quot;;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(xmlPath);<br><br>        User user &#x3D; (User)applicationContext.getBean(&quot;UserId&quot;);<br>        System.out.println(Arrays.toString(user.getStrings()));<br>        System.out.println(user.getList());<br>        System.out.println(user.getMap());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<pre><code>[&quot;11&quot;, &quot;22&quot;, &quot;33&quot;]
[&quot;44&quot;, &quot;55&quot;, &quot;66&quot;]
&#123;111=111, 222=222&#125;</code></pre>
<hr>
<h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a><strong>Bean的作用域</strong></h2><p>定义一个ScopeClass类 和 TestClass：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class ScopeClass &#123;<br><br>    public void show()&#123;<br>        System.out.println(this.hashCode());<br>    &#125;<br><br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext&quot;);<br>        ScopeClass scopeClass &#x3D; (ScopeClass)applicationContext.getBean(&quot;ScopeClassId&quot;);<br>        scopeClass.show();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="singleton"><a href="#singleton" class="headerlink" title="singleton:"></a><strong>singleton:</strong></h3><p>在XML文件中配置:    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;bean id&#x3D;&quot;ScopeClassId&quot; class&#x3D;&quot;com.newdemo.ScopeClass&quot; scope&#x3D;&quot;singleton&quot;&gt;&lt;&#x2F;bean&gt;<br></code></pre></td></tr></table></figure>
<p>在TestClass进行测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">	public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        ScopeClass scopeClass &#x3D; (ScopeClass)applicationContext.getBean(&quot;ScopeClassId&quot;);<br>        scopeClass.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<p>346224929<br>346224929</p>
<p>说明bean中配置singleton单例，一个bean容器（同一个上下文）中只存在一份</p>
<hr>
<h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype:"></a><strong>prototype:</strong></h3><p>在xml文件中将singleton改为prototype</p>
<p>输出结果：</p>
<p>550752602<br>680779399</p>
<p>说明每次使用都会创建新的实例</p>
<hr>
<h3 id="request和session"><a href="#request和session" class="headerlink" title="request和session"></a><strong>request和session</strong></h3><ul>
<li>request：每次http请求都会创建一个实例且仅在当前request有效</li>
<li>session：同上，每次http请求创建，当前session有效</li>
</ul>
<hr>
<h2 id="Bean的生命周期之初始化和销毁"><a href="#Bean的生命周期之初始化和销毁" class="headerlink" title="Bean的生命周期之初始化和销毁"></a><strong>Bean的生命周期之初始化和销毁</strong></h2><p>完整的Bean的生命周期包括：实例化、属性赋值、初始化、销毁，下面介绍初始化和销毁两部分</p>
<p>Bean的初始化和销毁方式有三种：</p>
<ul>
<li>自定义初始化和销毁方法</li>
<li>实现InitializingBean和DisposableBean接口</li>
<li>在xml头中为所有Bean定义默认的初始化和销毁方法</li>
</ul>
<p>定义一个LifeCircleClass类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class LifeCircleClass &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="自定义初始化和销毁方法"><a href="#自定义初始化和销毁方法" class="headerlink" title="自定义初始化和销毁方法"></a><strong>自定义初始化和销毁方法</strong></h3><p>在类中定义初始化和销毁方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class LifeCircleClass &#123;<br>   	public void init()&#123;<br>       	System.out.println(&quot;init&quot;);<br>   	&#125;<br>   	public void destroy()&#123;<br>       	System.out.println(&quot;destroy&quot;);<br>   	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在xml文件中配置bean：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;bean id&#x3D;&quot;LifeCircleClassId&quot; class&#x3D;&quot;com.newdemo.LifeCircleClass&quot; init-method&#x3D;&quot;init&quot; destroy-method&#x3D;&quot;destroy&quot;&gt;&lt;&#x2F;bean&gt;<br><br></code></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>       LifeCircleClass lifeCircleClass &#x3D; (LifeCircleClass)applicationContext.getBean(&quot;LifeCircleClassId&quot;);<br>       ((AbstractApplicationContext) applicationContext).close();  &#x2F;&#x2F;关闭容器<br></code></pre></td></tr></table></figure>
<p>输出结果：</p>
<p>init<br>destroy</p>
<hr>
<h3 id="实现InitializingBean和DisposableBean接口"><a href="#实现InitializingBean和DisposableBean接口" class="headerlink" title="实现InitializingBean和DisposableBean接口"></a><strong>实现InitializingBean和DisposableBean接口</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class LifeCircleClass implements InitializingBean, DisposableBean &#123;<br><br>   	@Override<br>   	public void afterPropertiesSet() throws Exception &#123;<br>       	System.out.println(&quot;init&quot;);<br>   	&#125;<br><br>   	@Override<br>   	public void destroy() throws Exception &#123;<br>       	System.out.println(&quot;destroy&quot;);<br>   	&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<p>此时可以不在xml文件中配置，测试结果相同</p>
<hr>
<h3 id="在xml文件头中配置默认的初始化和销毁方法"><a href="#在xml文件头中配置默认的初始化和销毁方法" class="headerlink" title="在xml文件头中配置默认的初始化和销毁方法"></a><strong>在xml文件头中配置默认的初始化和销毁方法</strong></h3><p>default-init-method 顶级 <beans> 元素属性上存在属性会导致Spring IoC容器 init 将bean类上调用的方法识别为初始化方法回调。当bean被创建和组装时，如果bean类具有这样的方法，则在适当的时候调用它。</beans></p>
<p>如：在LifeCircleClass中自定义init()和destroy()方法，在xml头中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;<br>      xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>      xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;<br>default-init-method&#x3D;&quot;init&quot; default-destroy-method&#x3D;&quot;destroy&quot;&gt;<br><br>   	&lt;bean id&#x3D;&quot;ScopeClassId&quot; class&#x3D;&quot;com.newdemo.ScopeClass&quot; scope&#x3D;&quot;prototype&quot;&gt;&lt;&#x2F;bean&gt;<br><br>   	&lt;bean id&#x3D;&quot;LifeCircleClassId&quot; class&#x3D;&quot;com.newdemo.LifeCircleClass&quot; &gt;&lt;&#x2F;bean&gt;<br>&lt;&#x2F;beans&gt;<br></code></pre></td></tr></table></figure>
<p>新建一个InitClass类并在xml文件中配置，测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        InitClass initClass &#x3D; (InitClass) applicationContext.getBean(&quot;InitClassId&quot;);<br>        ((AbstractApplicationContext) applicationContext).close();  &#x2F;&#x2F;关闭容器<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>测试结果相同</p>
<hr>
<h2 id="Aware接口"><a href="#Aware接口" class="headerlink" title="Aware接口"></a><strong>Aware接口</strong></h2><p>Spring中有很多继承于Aware接口的字接口，如：</p>
<p><img src="/2020/09/24/IOC/3397380-6ef519bbc705ce28.png" alt="Aware"></p>
<p>aware翻译为感知的，根据字面意思Aware接口应该是具有某些感知的功能</p>
<p>下面介绍一下ApplicationContextAware接口和BeanNameAware接口</p>
<p>新建一个AwareClass类，继承BeanNameAware接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class AwareClass implements BeanNameAware &#123;<br>    private String BeanName;<br>    @Override<br>    public void setBeanName(String s) &#123;<br>        this.BeanName &#x3D; s;<br>    &#125;<br><br>    public String getBeanName() &#123;<br>        return BeanName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>配置bean</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;bean id&#x3D;&quot;AwareClassId&quot; class&#x3D;&quot;com.newdemo.AwareClass&quot;&gt;&lt;&#x2F;bean&gt;<br></code></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>   public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        AwareClass awareClass &#x3D; (AwareClass)applicationContext.getBean(&quot;AwareClassId&quot;);<br>        System.out.println(awareClass.getBeanName());<br>   	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果</p>
<pre><code>AwareClassId</code></pre>
<p>实现BeanNameAware接口的类通过setter方法可以自动获取配置文件中的beanid</p>
<p>现在让Aware类继承ApplicationContextAware类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class AwareClass implements BeanNameAware, ApplicationContextAware &#123;<br>    private String BeanName;<br>    private ApplicationContext applicationContext;<br>    @Override<br>    public void setBeanName(String s) &#123;<br>        this.BeanName &#x3D; s;<br>    &#125;<br><br>    public String getBeanName() &#123;<br>        return BeanName;<br>    &#125;<br><br>    @Override<br>    public void setApplicationContext(ApplicationContext applicationContext) &#123;<br>        this.applicationContext &#x3D; applicationContext;<br>    &#125;<br><br>    public ApplicationContext getApplicationContext() &#123;<br>        return applicationContext;<br>    &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>   public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        AwareClass awareClass &#x3D; (AwareClass)applicationContext.getBean(&quot;AwareClassId&quot;);<br>        ApplicationContext applicationContext1 &#x3D; awareClass.getApplicationContext();<br>        System.out.println(applicationContext&#x3D;&#x3D;applicationContext1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>此时输出true，说明ApplicationContext接口中的setter方法可以自动获取该实现类所在的容器（上下文）</p>
<p>同理，其他Aware的子接口也同样具有感知功能</p>
<hr>
<h2 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a><strong>Bean的自动装配</strong></h2><p>对于Bean的属性的自动装配，此时不再需要在xml文件中手动对属性注入，主要有三种方式实现属性的自动装配：</p>
<ul>
<li>byname id==name</li>
<li>bytype 属性type == xml文件中的type</li>
<li>byconstructor 构造器列表参数type==属性类型</li>
</ul>
<p>定义一个Person类、PersonalInfo类、AddressInfo类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class Person &#123;<br>    private PersonalInfo personalInfo;<br>    private AddressInfo addressInfo;<br><br>    public void setPersonalInfo(PersonalInfo personalInfo) &#123;<br>        this.personalInfo &#x3D; personalInfo;<br>    &#125;<br><br>    public void setAddressInfo(AddressInfo addressInfo) &#123;<br>        this.addressInfo &#x3D; addressInfo;<br>    &#125;<br><br>    public void show()&#123;<br>        System.out.println(personalInfo.getName()+&quot; &quot;+personalInfo.getAge());<br>        System.out.println(addressInfo.getProvince()+&quot; &quot;+addressInfo.getCity());<br>    &#125;<br>&#125;<br><br>public class PersonalInfo &#123;<br>    private String name;<br>    private int age;<br>    public void setName(String name) &#123;<br>        this.name &#x3D; name;<br>    &#125;<br>    public void setAge(int age) &#123;<br>        this.age &#x3D; age;<br>    &#125;<br><br>    public String getName() &#123;<br>        return name;<br>    &#125;<br><br>    public int getAge() &#123;<br>        return age;<br>    &#125;<br><br>    public int getAge() &#123;<br>        return age;<br>    &#125;<br>&#125;	<br><br>public class AddressInfo &#123;<br><br>    private String Province;<br>    private String city;<br><br>    public void setProvince(String province) &#123;<br>        Province &#x3D; province;<br>    &#125;<br><br>    public void setCity(String city) &#123;<br>        this.city &#x3D; city;<br>    &#125;<br><br>    public String getProvince() &#123;<br>        return Province;<br>    &#125;<br><br>    public String getCity() &#123;<br>        return city;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<h3 id="byname"><a href="#byname" class="headerlink" title="byname"></a><strong>byname</strong></h3><p>使用byname自动装配，要求被装配的属性名要与xml文件中某个Bean的beanId相同，否则不进行装配</p>
<p>在xml中配置bean </p>
<p><strong><em>注：在配置id的时候尽量配置小写，不然有时候会出错，原因不清楚</em></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;bean id&#x3D;&quot;personalInfo&quot; class&#x3D;&quot;com.newdemo.PersonalInfo&quot;&gt;<br>       &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;zll&quot;&gt;&lt;&#x2F;property&gt;<br>       &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;21&quot;&gt;&lt;&#x2F;property&gt;<br>   &lt;&#x2F;bean&gt;<br><br>   &lt;bean id&#x3D;&quot;addressInfo&quot; class&#x3D;&quot;com.newdemo.AddressInfo&quot;&gt;<br>       &lt;property name&#x3D;&quot;province&quot; value&#x3D;&quot;GuangDong&quot;&gt;&lt;&#x2F;property&gt;<br>       &lt;property name&#x3D;&quot;city&quot; value&#x3D;&quot;GuangZhou&quot;&gt;&lt;&#x2F;property&gt;<br>   &lt;&#x2F;bean&gt;<br><br>   &lt;bean id&#x3D;&quot;PersonId&quot; class&#x3D;&quot;com.newdemo.Person&quot; autowire&#x3D;&quot;byName&quot;&gt;&lt;&#x2F;bean&gt;<br></code></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        Person person &#x3D; (Person)applicationContext.getBean(&quot;PersonId&quot;);<br>        person.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果为：</p>
<p>zll 21<br>GuangDong GuangZhou</p>
<hr>
<h3 id="bytype"><a href="#bytype" class="headerlink" title="bytype"></a><strong>bytype</strong></h3><p>bytype要求属性的类型与xml文件中的类型相同时才自动装配</p>
<p>在xml文件中的autowire改为bytype，输出结果相同</p>
<hr>
<h3 id="byConstructor"><a href="#byConstructor" class="headerlink" title="byConstructor"></a><strong>byConstructor</strong></h3><p>在Person类中添加构造方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> public Person(PersonalInfo personalInfo,AddressInfo addressInfo) &#123;<br>    	this.personalInfo &#x3D; personalInfo;<br>    	this.addressInfo &#x3D; addressInfo;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在xml文件中的autowire改为bytype，输出结果相同</p>
<hr>
<h2 id="注解实现Bean的自动配置"><a href="#注解实现Bean的自动配置" class="headerlink" title="注解实现Bean的自动配置"></a><strong>注解实现Bean的自动配置</strong></h2><p>Spring2.5引入了通过注解来配置bean及注入依赖的方法，使用注解配置时，不再需要通过xml文件配置bean类，简化了配置工作</p>
<h3 id="Component、-Service、-Controller、-Repository"><a href="#Component、-Service、-Controller、-Repository" class="headerlink" title="@Component、@Service、@Controller、@Repository"></a><strong>@Component、@Service、@Controller、@Repository</strong></h3><p>@Component是一个通用的Bean注解，通常用于注解业务中功能不清楚的Bean</p>
<p>@Service、@Controller、@Repository则是根据不同场景所采取的特定注解，在Spring的三层架构中，@Service对应业务层、@Controller对应控制层、@Repository对应持久层</p>
<p>以上四个注解能够自动装配某个类，相当于在xml文件中手动配置bean，默认的id为类名首字母小写</p>
<p>@Component的类中属性也会被自动装配（按构造器type自动装配）</p>
<p><strong><em>注：实现自动配置前，要在xml文件中加上：</em></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;context:component-scan base-package&#x3D;&quot;packageName&quot;&#x2F;&gt;<br></code></pre></td></tr></table></figure>
<p>否则会出现找不到beanid的异常</p>
<p>还是上面的Person类，删除Person类在xml中的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Component<br>public class Person &#123;<br>    private PersonalInfo personalInfo;<br>    private AddressInfo addressInfo;<br><br>&#x2F;&#x2F;    public void setPersonalInfo(PersonalInfo personalInfo) &#123;<br>&#x2F;&#x2F;        this.personalInfo &#x3D; personalInfo;<br>&#x2F;&#x2F;    &#125;<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;    public void setAddressInfo(AddressInfo addressInfo) &#123;<br>&#x2F;&#x2F;        this.addressInfo &#x3D; addressInfo;<br>&#x2F;&#x2F;    &#125;<br><br><br>    public Person(PersonalInfo personalInfo,AddressInfo addressInfo) &#123;<br>        this.personalInfo &#x3D; personalInfo;<br>        this.addressInfo &#x3D; addressInfo;<br>    &#125;<br><br>    public void show()&#123;<br>        System.out.println(personalInfo.getName()+&quot; &quot;+personalInfo.getAge());<br>        System.out.println(addressInfo.getProvince()+&quot; &quot;+addressInfo.getCity());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        Person person &#x3D; (Person)applicationContext.getBean(&quot;person&quot;);<br>        person.show();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>输出结果</p>
<p>zll 21<br>GuangDong GuangZhou</p>
<p>完成Person的自动配置，且Person中的属性也自动装配</p>
<hr>
<h3 id="Required"><a href="#Required" class="headerlink" title="@Required"></a>@Required</h3><p>@Required作用于属性的setter方法，表明该属性必须在xml文件中进行配置，否则抛出异常</p>
<p>在Person类中添加属性String name、setter和getter方法，并添加@Required注解</p>
<p>若不进行配置，则会提示错误：</p>
<p><img src="/2020/09/24/IOC/1601282519408.jpg" alt="error"></p>
<p>添加配置即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;RequiredName&quot;&gt;&lt;&#x2F;property&gt;<br></code></pre></td></tr></table></figure>


<hr>
<h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>@Autowired注解的功能是为属性进行自动注入，@Autowired可作用于属性、setter、构造方法，@Autowired通过bytype方法查找上下文中与属性type相同的bean进行配置，@Autowired中默认为Required=true 即强制上下文必须要存在与属性type相同的bean，否则抛出异常，可用required=false消除这种强制性</p>
<p><strong>作用于属性</strong></p>
<p>当@Autowired作用于属性时，可以不用在类中添加该属性的setter方法或构造器，也不用在该类的bean中配置属性</p>
<p>将Person类中的PersonalInfo和AddressInfo都加上@Autowired注解，删除构造方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Component<br>public class Person &#123;<br>    @Autowired<br>    private PersonalInfo personalInfo;<br>    @Autowired<br>    private AddressInfo addressInfo;<br>&#x2F;&#x2F;    public void setPersonalInfo(PersonalInfo personalInfo) &#123;<br>&#x2F;&#x2F;        this.personalInfo &#x3D; personalInfo;<br>&#x2F;&#x2F;    &#125;<br>&#x2F;&#x2F;    public void setAddressInfo(AddressInfo addressInfo) &#123;<br>&#x2F;&#x2F;        this.addressInfo &#x3D; addressInfo;<br>&#x2F;&#x2F;    &#125;<br>&#x2F;&#x2F;    public Person(PersonalInfo personalInfo, AddressInfo addressInfo) &#123;<br>&#x2F;&#x2F;        this.personalInfo &#x3D; personalInfo;<br>&#x2F;&#x2F;        this.addressInfo &#x3D; addressInfo;<br>&#x2F;&#x2F;    &#125;<br><br>    public void show()&#123;<br>        System.out.println(personalInfo.getName()+&quot; &quot;+personalInfo.getAge());<br>        System.out.println(addressInfo.getProvince()+&quot; &quot;+addressInfo.getCity());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        Person person &#x3D; (Person)applicationContext.getBean(&quot;person&quot;);<br>        person.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果</p>
<p>zll 21<br>GuangDong GuangZhou</p>
<p>此时，如果把xml文件中PersonalInfo的bean配置删除，则会抛出异常， 因为使用@Autowired注解的属性，默认xml文件中必须存在与属性相同类型的bean</p>
<p>将PersonalInfo的@Autowired注解改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Autowired(required &#x3D; false)<br>   private PersonalInfo personalInfo;<br></code></pre></td></tr></table></figure>
<p>此时通过编译，不过会抛出空指针异常，因为上下文无法匹配PersonalInfo这一属性，将Person类中的show函数注释PersonalInfo的输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">    public void show()&#123;<br>&#x2F;&#x2F;        System.out.println(personalInfo.getName()+&quot; &quot;+personalInfo.getAge());<br>        System.out.println(addressInfo.getProvince()+&quot; &quot;+addressInfo.getCity());<br>    &#125;<br></code></pre></td></tr></table></figure>
<p>输出结果</p>
<p>GuangDong GuangZhou</p>
<hr>
<p><strong>作用于setter方法</strong></p>
<p>@Autowired作用于setter方法时，不需要在类的bean中配置属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class Person &#123;<br>    private PersonalInfo personalInfo;<br>    private AddressInfo addressInfo;<br>    @Autowired<br>    public void setPersonalInfo(PersonalInfo personalInfo) &#123;<br>        this.personalInfo &#x3D; personalInfo;<br>    &#125;<br>    @Autowired<br>    public void setAddressInfo(AddressInfo addressInfo) &#123;<br>        this.addressInfo &#x3D; addressInfo;<br>    &#125;<br>&#x2F;&#x2F;    public Person(PersonalInfo personalInfo, AddressInfo addressInfo) &#123;<br>&#x2F;&#x2F;        this.personalInfo &#x3D; personalInfo;<br>&#x2F;&#x2F;        this.addressInfo &#x3D; addressInfo;<br>&#x2F;&#x2F;    &#125;<br><br>    public void show()&#123;<br>        System.out.println(personalInfo.getName()+&quot; &quot;+personalInfo.getAge());<br>        System.out.println(addressInfo.getProvince()+&quot; &quot;+addressInfo.getCity());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出结果相同，相当于bean中配置autowire=bytype</p>
<hr>
<p><strong>作用于构造方法</strong></p>
<p>与作用于setter方法同理</p>
<hr>
<p><strong>集合的注入</strong></p>
<p>Person类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Component<br>public class Person &#123;<br>    private PersonalInfo personalInfo;<br>    private AddressInfo addressInfo;<br>    private List&lt;PersonalInfo&gt; list;<br><br>    @Autowired<br>    public void setPersonalInfo(PersonalInfo personalInfo) &#123;<br>        this.personalInfo &#x3D; personalInfo;<br>    &#125;<br>    @Autowired<br>    public void setAddressInfo(AddressInfo addressInfo) &#123;<br>        this.addressInfo &#x3D; addressInfo;<br>    &#125;<br><br>    @Autowired<br>    public void setList(List&lt;PersonalInfo&gt; list) &#123;<br>        this.list &#x3D; list;<br>    &#125;<br><br>    public void show()&#123;<br>		list.forEach(v-&gt; System.out.println(v.getName()+&quot; &quot;+v.getAge()));<br>    &#125;<br>&#125;	<br></code></pre></td></tr></table></figure>
<p>并在xml文件中再添加一个PersonalInfo的Bean</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;bean id&#x3D;&quot;personalInfo&quot; class&#x3D;&quot;com.newdemo.PersonalInfo&quot;&gt;<br>       &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;zll&quot;&gt;&lt;&#x2F;property&gt;<br>       &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;21&quot;&gt;&lt;&#x2F;property&gt;<br>   &lt;&#x2F;bean&gt;<br>   <br>   &lt;bean id&#x3D;&quot;personalInfo1&quot; class&#x3D;&quot;com.newdemo.PersonalInfo&quot;&gt;<br>       &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;zlll&quot;&gt;&lt;&#x2F;property&gt;<br>       &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;211&quot;&gt;&lt;&#x2F;property&gt;<br>   &lt;&#x2F;bean&gt;<br></code></pre></td></tr></table></figure>
<p>测试输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        Person person &#x3D; (Person)applicationContext.getBean(&quot;person&quot;);<br>        person.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出</p>
<p>zll 21<br>zlll 211</p>
<p>说明集合的自动装配中，会自动搜索上下文中与属性类型相同的bean，并把这些所有的bean同时注入集合中</p>
<p>将属性改为map映射      private Map&lt;String,PersonalInfo&gt; map;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">    public void show()&#123;<br>&#x2F;&#x2F;        System.out.println(personalInfo.getName()+&quot; &quot;+personalInfo.getAge());<br>&#x2F;&#x2F;        System.out.println(addressInfo.getProvince()+&quot; &quot;+addressInfo.getCity());<br>&#x2F;&#x2F;        System.out.println(list);<br>        map.forEach((k,v)-&gt; System.out.println(map.get(k).getName()+&quot; &quot;+map.get(k).getAge()));<br>        System.out.println();<br>        map.forEach((k,v)-&gt; System.out.println(k+&quot; &quot; +v));<br>    &#125;<br></code></pre></td></tr></table></figure>
<p>输出</p>
<p>zll 21<br>zlll 211</p>
<p>personalInfo com.newdemo.PersonalInfo@1eb5174b<br>personalInfo1 com.newdemo.PersonalInfo@67080771</p>
<p>说明是将bean的id作为键，对象作为值</p>
<hr>
<h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a><strong>@Qualifier</strong></h3><p>当xml文件中存在多个type相同类型的bean时，若使用自动配置，编译器不知道该匹配哪个则会抛出异常，使用@Qualifier来制定匹配哪个bean</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> &lt;bean id&#x3D;&quot;personalInfo&quot; class&#x3D;&quot;com.newdemo.PersonalInfo&quot;&gt;<br>    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;zll&quot;&gt;&lt;&#x2F;property&gt;<br>    &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;21&quot;&gt;&lt;&#x2F;property&gt;<br>&lt;&#x2F;bean&gt;<br>&lt;bean id&#x3D;&quot;personalInfo_Id&quot; class&#x3D;&quot;com.newdemo.PersonalInfo&quot;&gt;<br>    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;zllll&quot;&gt;&lt;&#x2F;property&gt;<br>    &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;2111&quot;&gt;&lt;&#x2F;property&gt;<br>&lt;&#x2F;bean&gt;<br><br>   @Autowired<br>@Qualifier(&quot;personalInfo_Id&quot;)<br>public void setPersonalInfo(PersonalInfo personalInfo) &#123;<br>    this.personalInfo &#x3D; personalInfo;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出</p>
<p>zllll 2111</p>
<hr>
<h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a><strong>@Bean</strong></h3><p>用@Bean注解的方法会配置、实例化一个新的对象，这个对象由IOC容器管理，bean_id为方法名，相当于 <bean id="method-name" class="..."></bean></p>
<p>新建一个CharacterInfo类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class CharacterInfo &#123;<br>    public void show()&#123;<br>        System.out.println(&quot;Character&#39;show&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在Person类中添加CharacterInfo类属性，并添加getCharacterInfo()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public CharacterInfo getCharacterInfo()&#123;<br>    return new CharacterInfo();<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在testClass中测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        CharacterInfo characterInfo &#x3D; (CharacterInfo)applicationContext.getBean(&quot;getCharacterInfo&quot;);<br>        characterInfo.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出</p>
<p>Character’show</p>
<hr>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a><strong>@Configuration</strong></h3><p>@Configuration用于定义配置类，相当于<beans>…</beans>，被注解的类内部包含一个或多个被@Bean注解的方法</p>
<p>将Person类的注解改为@Configuration，可得到相同的结果</p>
<ul>
<li>@Scope</li>
</ul>
<p>@Scope用来定义bean的作用域，默认单例，相当于<bean id class scope="singleton"></bean></p>
<p>将@Scope作用在Person类上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        Person person &#x3D; (Person)applicationContext.getBean(&quot;person&quot;);<br>        Person person1 &#x3D; (Person)applicationContext.getBean(&quot;person&quot;);<br>        System.out.println(person);<br>        System.out.println(person1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>输出</p>
<p>com.newdemo.Person$$EnhancerBySpringCGLIB$$5578c3b8@6f10d5b6<br>com.newdemo.Person$$EnhancerBySpringCGLIB$$5578c3b8@6f10d5b6</p>
<hr>
<h2 id="自定义命名策略"><a href="#自定义命名策略" class="headerlink" title="自定义命名策略"></a><strong>自定义命名策略</strong></h2><p>在Spring中，我们可以实现通过实现BeanNameGenerator接口，然后在xml文件中配置自定义命名类，来完成对bean的自定义命名策略    </p>
<p>定义MyBeanNameGenerator类，实现BeanNameGenerator接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class MyBeanNameGenerator implements BeanNameGenerator &#123;<br>    @Override<br>    public String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry beanDefinitionRegistry) &#123;<br>        return beanDefinition.getBeanClassName()+&quot;Id&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class TestClass &#123;<br>    public static void main(String[] args) &#123;<br>        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;newcontext.xml&quot;);<br>        Person person &#x3D; (Person)applicationContext.getBean(&quot;com.newdemo.PersonId&quot;);<br>        person.show();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>输出</p>
<p>zllll 2111</p>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC入门</title>
    <url>/2020/10/04/SpringMVC/</url>
    <content><![CDATA[<h1 id="什么是MVC框架"><a href="#什么是MVC框架" class="headerlink" title="什么是MVC框架"></a><strong>什么是MVC框架</strong></h1><p>MVC的全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，是在WEB模型中一种很流行的框架，通过把Model，View，Controller分离，把较为复杂的web应用分成逻辑清晰的几部分，是为了简化开发，增强开发人员间的配合，减少出错，MVC是一种分层工作的方法。</p>
<p>model 模型：一个或多个bean，负责存储数据和处理业务逻辑<br>view 视图：一个或多个jsp文件，负责显示信息<br>controller 控制器：一个或多个servlet，负责处理与用户间的交互</p>
<hr>
<h1 id="什么是SpringMVC"><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a><strong>什么是SpringMVC</strong></h1><p>SpringMVC是Spring的一个子框架，拥有Spring的特性</p>
<h2 id="SpringMVC的组成"><a href="#SpringMVC的组成" class="headerlink" title="SpringMVC的组成"></a><strong>SpringMVC的组成</strong></h2><p>Spring MVC主要由 DispatcherServlet(前端控制器)、HandlerMapping(处理器映射)、Controller(处理器)、ViewResolver(视图解析器)、View(视图) 组成</p>
<ul>
<li><h3 id="DispatcherServlet接口："><a href="#DispatcherServlet接口：" class="headerlink" title="DispatcherServlet接口："></a>DispatcherServlet接口：</h3></li>
</ul>
<p>(Servlet)</p>
<p>DispatcherServlet是SpringMVC的核心，DispatcherServlet接口是前端控制器，所有的请求都有经过它来统一分发。在DispatcherServlet将请求分发给Spring Controller之前，需要借助于Spring提供的HandlerMapping类定位到具体的Controller</p>
<ul>
<li><h3 id="HandlerMapping接口："><a href="#HandlerMapping接口：" class="headerlink" title="HandlerMapping接口："></a>HandlerMapping接口：</h3></li>
</ul>
<p>(Servlet-Mapping)</p>
<p>DispatcherServlet通过HandlerMapping定位具体的Controller，将客户端请求交给Controller</p>
<ul>
<li><h3 id="Controller接口："><a href="#Controller接口：" class="headerlink" title="Controller接口："></a>Controller接口：</h3></li>
</ul>
<p>(Servlet)</p>
<p>Controller将处理客户端发来的请求，一旦Controller处理完用户请求，将返回ModelAndView对象给 DispatcherServlet前端控制器，ModelAndView中包含了模型（Model）和视图（View）。</p>
<ul>
<li><h3 id="ViewResolver接口："><a href="#ViewResolver接口：" class="headerlink" title="ViewResolver接口："></a>ViewResolver接口：</h3></li>
</ul>
<p>Spring提供的视图解析器（ViewResolver）在Web应用中查找View对象，从而将相应结果渲染给客户。</p>
<h2 id="SpringMVC的运行过程"><a href="#SpringMVC的运行过程" class="headerlink" title="SpringMVC的运行过程"></a>SpringMVC的运行过程</h2><p><img src="/2020/10/04/SpringMVC/SpringMVC.png"></p>
<p>SpringMVC的运行过程为：</p>
<p>客户端提交请求给DispatcherServlet，DispatcherServlet寻找一个或多个的处理器映射HandlerMapping，找到与请求相应的Controller，然后将请求交给Controller，Controller处理完毕请求之后返回ModelAndView对象给Dispatcher，Dispatcher通过ViewResolver找到ModelAndView中指定的视图后，将视图返回给客户端</p>
<hr>
<h1 id="SpringMVC入门之HelloWorld"><a href="#SpringMVC入门之HelloWorld" class="headerlink" title="SpringMVC入门之HelloWorld"></a><strong>SpringMVC入门之HelloWorld</strong></h1><p>在springmvc.controller包下创建HelloWorldController类，继承Controller接口：</p>
<p><strong>注：要选择org.springframework.web.servlet接口下的Controller子接口</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">package springmvc.controller;<br><br>import org.springframework.web.servlet.ModelAndView;<br>import org.springframework.web.servlet.mvc.Controller;<br><br>public class HelloWorldController implements Controller &#123;<br>    @Override<br>    public ModelAndView handleRequest(javax.servlet.http.HttpServletRequest httpServletRequest, javax.servlet.http.HttpServletResponse httpServletResponse) throws Exception &#123;<br>        ModelAndView mav &#x3D; new ModelAndView();<br>        mav.addObject(&quot;message&quot;,&quot;helloworld!&quot;);<br>        mav.setViewName(&quot;&#x2F;WEB-INF&#x2F;helloWorld.jsp&quot;);<br>        return mav;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>其中的helloWorld.jsp文件后面会创建</p>
<p>配置dispatcher-servlet.xml文件，为前端处理器添加处理器映射：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;<br>&lt;!DOCTYPE beans PUBLIC &quot;-&#x2F;&#x2F;SPRING&#x2F;&#x2F;DTD BEAN&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;dtd&#x2F;spring-beans.dtd&quot;&gt;<br>&lt;beans&gt;<br>    &lt;bean id&#x3D;&quot;simpleUrlHandlerMapping&quot;<br>          class&#x3D;&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&gt;<br>        &lt;property name&#x3D;&quot;mappings&quot;&gt;<br>            &lt;props&gt;<br>&lt;!--                这里HelloWorldController使用的是后边bean的id--&gt;<br>                &lt;prop key&#x3D;&quot;&#x2F;index&quot;&gt;HelloWorldController&lt;&#x2F;prop&gt;<br>            &lt;&#x2F;props&gt;<br>        &lt;&#x2F;property&gt;<br>    &lt;&#x2F;bean&gt;<br>    &lt;bean id&#x3D;&quot;HelloWorldController&quot; class&#x3D;&quot;springmvc.controller.HelloWorldController&quot;&gt;&lt;&#x2F;bean&gt;<br>&lt;&#x2F;beans&gt;<br></code></pre></td></tr></table></figure>

<p>配置web.xml文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;web-app version&#x3D;&quot;2.4&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee&quot;<br>         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee<br>http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee&#x2F;web-app_2_4.xsd&quot;&gt;<br>    &lt;servlet&gt;<br><br>&lt;!--        会自动使用这个name到WEB-INF中找***-servlet.xml 的文件，所以xml文件名为dispatcher-servlet.xml，而这里的servlet-name为dispatcher--&gt;<br><br>        &lt;servlet-name&gt;dispatcher&lt;&#x2F;servlet-name&gt;<br>        &lt;servlet-class&gt;<br>            org.springframework.web.servlet.DispatcherServlet<br>        &lt;&#x2F;servlet-class&gt;<br>        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;<br>    &lt;&#x2F;servlet&gt;<br>    &lt;servlet-mapping&gt;<br>        &lt;servlet-name&gt;dispatcher&lt;&#x2F;servlet-name&gt;<br>        &lt;!--这里将url设置为&#x2F;，处理所有的url        --&gt;<br>        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;	<br>    &lt;&#x2F;servlet-mapping&gt;<br>&lt;&#x2F;web-app&gt;<br></code></pre></td></tr></table></figure>

<p>修改index.jsp文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;$Title$&lt;&#x2F;title&gt;<br>  &lt;&#x2F;head&gt;<br>  &lt;body&gt;<br>  &lt;h1&gt;welcome to login&lt;&#x2F;h1&gt;<br>  &lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p>在WEB-INF下添加helloWorld.jsp文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>&lt;%--绑定处理器中添加的值--%&gt;<br><br>    &lt;h1&gt;$&#123;message&#125;&lt;&#x2F;h1&gt;	<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<p>项目的文件目录如下：</p>
<p><img src="/2020/10/04/SpringMVC/content.jpg" alt="content"></p>
<p>postman访问<a href="http://localhost:8080/">http://localhost:8080</a><br><img src="/2020/10/04/SpringMVC/8080.jpg" alt="8080"></p>
<p>访问<a href="http://localhost:8080/index">http://localhost:8080/index</a><br><img src="/2020/10/04/SpringMVC/index.jpg" alt="index"></p>
<p>SpringMVC中的数据绑定，只要在控制器中对数据模型进行相应的处理，如上面例子的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">mav.addObject(&quot;message&quot;,&quot;helloworld!&quot;); <br></code></pre></td></tr></table></figure>
<p>或者Model类型对象的 addAttribute()方法处理数据，然后在相应的view层使用${}显示数据即可。</p>
<p>如果在Dispatcher中配置视图解析器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;bean id&#x3D;&quot;internalResourceViewResolver&quot; class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;<br>       &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;&quot;&gt;&lt;&#x2F;property&gt;<br>       &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&gt;&lt;&#x2F;property&gt;<br>   &lt;&#x2F;bean&gt;<br></code></pre></td></tr></table></figure>
<p>则Controller中的返回对象ModelAndView中指定的视图不用添加前缀和后缀</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">mav.setViewName(&quot;result&quot;);<br></code></pre></td></tr></table></figure>
<p>将返回同样的结果</p>
<hr>
<h1 id="Controller注解和-RequestMapping注解"><a href="#Controller注解和-RequestMapping注解" class="headerlink" title="@Controller注解和@RequestMapping注解"></a><strong>@Controller注解和@RequestMapping注解</strong></h1><p><strong>注：要使用注解，要在控制器的配置文件中加上如下语句</strong>    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;context: component-scan base-package&#x3D;&quot;package-name&quot;&gt;&lt;&#x2F;context: component-scan&gt;<br></code></pre></td></tr></table></figure>

<h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>使用@Controller注解将某类声明为控制器，使用@Controller就不用在Dispatcher配置文件中配置控制器了</p>
<h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p>使用@RequestMapping可以为每个请求编写对应的处理方法</p>
<h3 id="方法级别注解"><a href="#方法级别注解" class="headerlink" title="方法级别注解"></a>方法级别注解</h3><p>@RequestMapping作用于方法时，若客户端有相应的请求，则dispatcher将通过该请求找到对应的方法，从而找到方法所在的控制器，由控制器处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Controller<br>public class LoginController &#123;<br>    @RequestMapping(&quot;&#x2F;login&quot;)<br>    public String login()&#123;<br>        return &quot;login&quot;;<br>    &#125;<br>    @RequestMapping(value &#x3D; &quot;&#x2F;result&quot;)<br>    public String result()&#123;<br>        return &quot;result&quot;;<br>    &#125;<br>&#125;<br><br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;$Title$&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;welcome to login&lt;&#x2F;h1&gt;<br>&lt;form action&#x3D;&quot;&#x2F;result&quot;&gt;<br>    学号：&lt;input name&#x3D;&quot;id&quot;&gt;&lt;br&gt;<br>    姓名：&lt;input name&#x3D;&quot;name&quot;&gt;&lt;br&gt;<br>    年龄：&lt;input name&#x3D;&quot;age&quot;&gt;&lt;br&gt;<br>    &lt;button type&#x3D;&quot;sumbit&quot;&gt;提交&lt;&#x2F;button&gt;<br>&lt;&#x2F;form&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p><strong>注：此配置是基于视图处理器的配置</strong></p>
<p>此时，浏览器打开<a href="http://localhost:8080/login">http://localhost:8080/login</a> 将会成功显示登陆界面</p>
<h3 id="类级别注解"><a href="#类级别注解" class="headerlink" title="类级别注解"></a>类级别注解</h3><p>在类级别注解的情况下，控制器类中的所有方法都将映射为类级别的请求。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Controller<br>@RequestMapping(&quot;&#x2F;init&quot;)<br>public class LoginController &#123;<br>    @RequestMapping(&quot;&#x2F;login&quot;)<br>    public String login()&#123;<br>        return &quot;login&quot;;<br>    &#125;<br>    @RequestMapping(value &#x3D; &quot;&#x2F;result&quot;)<br>    public String result()&#123;<br>        return &quot;result&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>此时，浏览器打开<a href="http://localhost:8080/init/login">http://localhost:8080/init/login</a> 将会成功显示登陆界面</p>
<h2 id="接收请求参数"><a href="#接收请求参数" class="headerlink" title="接收请求参数"></a><strong>接收请求参数</strong></h2><h3 id="直接把表单数据写在参数列表中"><a href="#直接把表单数据写在参数列表中" class="headerlink" title="直接把表单数据写在参数列表中"></a><strong>直接把表单数据写在参数列表中</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">   @Controller<br>public class LoginController &#123;<br>    @RequestMapping(&quot;&#x2F;login&quot;)<br>    public String login()&#123;<br>        return &quot;login&quot;;<br>    &#125;<br>    @RequestMapping(value &#x3D; &quot;&#x2F;result&quot;)<br>    public String result(String name,String id,int age,Model model)&#123;<br>        model.addAttribute(&quot;id&quot;,id);<br>        model.addAttribute(&quot;name&quot;,name);<br>        model.addAttribute(&quot;age&quot;,age);<br>        return &quot;result&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="HttpServletRequest获得参数"><a href="#HttpServletRequest获得参数" class="headerlink" title="HttpServletRequest获得参数"></a><strong>HttpServletRequest获得参数</strong></h3><p>如Model接口和javax.servlet.http.HttpServletRequest组合可以像ModelAndView那样返回客户端的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@RequestMapping(value &#x3D; &quot;&#x2F;result&quot;)<br>   public String result(Model model,javax.servlet.http.HttpServletRequest httpServletRequest)&#123;<br>       model.addAttribute(&quot;id&quot;,httpServletRequest.getParameter(&quot;id&quot;));<br>       model.addAttribute(&quot;name&quot;,httpServletRequest.getParameter(&quot;name&quot;));<br>       model.addAttribute(&quot;age&quot;,httpServletRequest.getParameter(&quot;age&quot;));<br>       return &quot;result&quot;;<br>   &#125;<br></code></pre></td></tr></table></figure>

<h3 id="通过实体Bean接收请求参数"><a href="#通过实体Bean接收请求参数" class="headerlink" title="通过实体Bean接收请求参数"></a><strong>通过实体Bean接收请求参数</strong></h3><p>student类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Component<br>public class student &#123;<br>    private String id;<br>    private String name;<br>    private int age;<br>    &#x2F;&#x2F;省略getter和setter<br>    public String toString()&#123;<br>       	return &quot;[id&#x3D;&quot;+id+&quot;,name&#x3D;&quot;+name+&quot;,age&#x3D;&quot;+age+&quot;]&quot;;<br>   	&#125;<br>&#125;<br><br>   @RequestMapping(value &#x3D; &quot;&#x2F;result&quot;)<br>   public String result(student stu,Model model)&#123;<br>       model.addAttribute(&quot;id&quot;,stu.getId());<br>       model.addAttribute(&quot;name&quot;,stu.getName());<br>       model.addAttribute(&quot;age&quot;,stu.getAge());<br>       return &quot;result&quot;;<br>   &#125;<br></code></pre></td></tr></table></figure>
<h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a><strong>@RequestParam</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@RequestMapping(value &#x3D; &quot;&#x2F;result&quot;)<br>public String result(student stu, Model model, @RequestParam String name, @RequestParam String id)&#123;<br>        System.out.println(id + &quot; &quot; + name);<br>        model.addAttribute(&quot;id&quot;, stu.getId());<br>        model.addAttribute(&quot;name&quot;, stu.getName());<br>        model.addAttribute(&quot;age&quot;, stu.getAge());<br>    return &quot;result&quot;;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a><strong>@ModelAttribute</strong></h3><p>当 @ModelAttribute 注解放在处理方法的形参上时，用于将多个请求参数封装到一个实体对象，从而简化数据绑定流程，而且自动暴露为模型数据，在视图页面展示时使用。而“通过实体Bean接收请求参数”中只是将多个请求参数封装到一个实体对象，并不能暴露为模型数据（需要使用 model.addAttribute 语句才能暴露为模型数据)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@RequestMapping(value &#x3D; &quot;&#x2F;result&quot;)<br>public String result(@ModelAttribute(&quot;stu&quot;) student stu)&#123;<br>    System.out.println(stu.getId()+&quot; &quot;+stu.getName()+&quot; &quot;+stu.getAge());<br>    return &quot;result&quot;;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在result处理方法中，ModelAttribute(“stu”) student stu先将请求参数的输入封装到student对象中，然后再创建对象的实例，以键值为stu存储在Model对象中</p>
<p>此时，只要在相应的result.jsp中使用EL表达式¥{property}就可以将数据表示出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;登录成功&lt;&#x2F;h1&gt;<br>    &lt;p&gt;$&#123;id&#125;&lt;&#x2F;p&gt;<br>    &lt;p&gt;$&#123;name&#125;&lt;&#x2F;p&gt;<br>    &lt;p&gt;$&#123;age&#125;&lt;&#x2F;p&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<p>ModelAttribute作用于无返回值的方法，被@ModelAttribute注释的方法会在此controller每个方法执行前被执行</p>
<p>在控制器中添加show方法，想要把请求参数显示在result.jsp中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@ModelAttribute<br>   public void show(Model model,@RequestParam String name)&#123;<br>       model.addAttribute(&quot;name&quot;,name);<br>   &#125;<br></code></pre></td></tr></table></figure>
<p>运行发现，name请求参数成功显示在页面中</p>
<h1 id="Service和-AutoWired"><a href="#Service和-AutoWired" class="headerlink" title="@Service和@AutoWired"></a>@Service和@AutoWired</h1><p>在springmvc.controller包下创建ServiceInterface接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public interface ServiceInterface &#123;<br>    public void service(student stu);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>提供实现类ServiceImpl，该类标注为Service类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Service<br>public class ServiceImpl implements ServiceInterface&#123;<br>    public void service(student stu)&#123;<br>        System.out.println(&quot;service&quot;);<br>        System.out.println(stu.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在LoginController控制器中添加属性，标志为自动注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Autowired(required &#x3D; false)<br>ServiceInterface serviceInterface;<br></code></pre></td></tr></table></figure>
<p>修改result处理方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@RequestMapping(value &#x3D; &quot;&#x2F;result&quot;)<br>public String result(@ModelAttribute(&quot;stu&quot;) student stu)&#123;<br>    serviceInterface.service(stu);<br>    return &quot;result&quot;;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在postman中提交请求，可以发现IDEA输出端成功显示表单信息</p>
<h1 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a><strong>转发和重定向</strong></h1><p>重定向是将用户从当前处理请求定向到另一个视图或处理请求，以前的请求（request）中存放的信息全部失效，并进入一个新的 request 作用域，如return “redirect:aview”;</p>
<p>转发是将用户对当前处理的请求转发给另一个视图或处理请求，以前的 request 中存放的信息不会失效。</p>
<p>转发是服务器行为，重定向是客户端行为。</p>
<p>在 Spring MVC 框架中，控制器类中处理方法的 return 语句默认就是转发实现，只不过实现的是转发到视图。</p>
<h1 id="SpringMVC与JSON的数据交互"><a href="#SpringMVC与JSON的数据交互" class="headerlink" title="SpringMVC与JSON的数据交互"></a>SpringMVC与JSON的数据交互</h1><h2 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a><strong>jackson</strong></h2><p>添加依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;dependency&gt;<br>  &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;<br>  &lt;artifactId&gt;jackson-core&lt;&#x2F;artifactId&gt;<br>  &lt;version&gt;2.8.1&lt;&#x2F;version&gt;<br>&lt;&#x2F;dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;<br>  &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;<br>  &lt;version&gt;2.8.1&lt;&#x2F;version&gt;<br>&lt;&#x2F;dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;<br>  &lt;artifactId&gt;jackson-annotations&lt;&#x2F;artifactId&gt;<br>  &lt;version&gt;2.8.1&lt;&#x2F;version&gt;<br>&lt;&#x2F;dependency&gt;<br></code></pre></td></tr></table></figure>
<p>在UserController中添加json方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@RequestMapping(&quot;&#x2F;json&quot;)<br>@ResponseBody<br>public String json()&#123;<br>    return new student(&quot;123&quot;,&quot;张三&quot;,12).toString();<br>&#125;<br></code></pre></td></tr></table></figure>
<p>或者使用ObjectMapper对象的writeValueAsString方法，将对象解析为字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@RequestMapping(value &#x3D; &quot;&#x2F;json&quot;)<br>@ResponseBody<br>public String json() throws IOException &#123;<br>    student stu &#x3D;  new student(&quot;123&quot;,&quot;张三&quot;,12);<br>    ObjectMapper objectMapper &#x3D; new ObjectMapper();<br>    String str &#x3D; objectMapper.writeValueAsString(stu);<br>    return str;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>另外，用@ResponseBody作用于方法返回字符串给请求，@RequestBody作用于参数用于接受Json对象字符串后自动转换为对象</p>
<p>postman测试，网页中出现[id=123,name=??,age=12]，出现乱码</p>
<p><strong>JSON乱码解决</strong></p>
<ul>
<li>@RequestMapping添加属性 produces=”application/json;charset=utf-8”</li>
</ul>
<p>此时返回[id=123,name=张三,age=12]</p>
<ul>
<li>在dispatcher-servlet中添加如下配置统一解决问题<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;mvc: annotation-driven&gt;<br>    &lt;mvc: message-converters register-defaults&#x3D;&quot;true&quot;&gt;<br>        &lt;bean class&#x3D;&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;<br>            &lt;constructor-arg value&#x3D;&quot;UTF-8&quot;&#x2F;&gt;<br>        &lt;&#x2F;bean&gt;<br>        &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;<br>            &lt;property name&#x3D;&quot;objectMapper&quot;&gt;<br>                &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;&gt;<br>                    &lt;property name&#x3D;&quot;failOnEmptyBeans&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;<br>                &lt;&#x2F;bean&gt;<br>            &lt;&#x2F;property&gt;<br>        &lt;&#x2F;bean&gt;<br>    &lt;&#x2F;mvc: message-converters&gt;<br>&lt;&#x2F;mvc: annotation-driven&gt;<br></code></pre></td></tr></table></figure></li>
<li>将控制器注解位@RestController</li>
</ul>
<p>此时控制器类的所有处理方法都返回一个JSON字符串，不再进行视图解析</p>
<h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a><strong>fastjson</strong></h2><p>添加依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;<br>    &lt;version&gt;1.2.74&lt;&#x2F;version&gt;<br> &lt;&#x2F;dependency&gt;<br></code></pre></td></tr></table></figure>

<p>fastjson中JSON类中有很多静态方法，只要返回字符串就好，如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">String str &#x3D; JSON.toJSONString(stu);<br></code></pre></td></tr></table></figure>
<p>当然也有json字符串转换为java对象的方法</p>
<h2 id="ajax-json与MVC交互实例"><a href="#ajax-json与MVC交互实例" class="headerlink" title="ajax json与MVC交互实例"></a><strong>ajax json与MVC交互实例</strong></h2><p>模仿注册页面中账号和密码的有效性检验</p>
<p>User类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Component<br>public class User &#123;<br><br>    @NotBlank(message &#x3D; &quot;用户名不能为空&quot;)<br>    private String name;<br>    @NotBlank(message &#x3D; &quot;密码不能为空&quot;)<br>    @Length(min &#x3D; 3,max &#x3D; 8,message &#x3D; &quot;密码位数为3-8位&quot;)<br>    private String passwords;<br><br>    public String getPasswords() &#123;<br>        return passwords;<br>    &#125;<br><br>    public String getName() &#123;<br>        return name;<br>    &#125;<br><br>    public void setPasswords(String passwords) &#123;<br><br>        this.passwords &#x3D; passwords;<br>    &#125;<br><br>    public void setName(String name) &#123;<br>        this.name &#x3D; name;<br>    &#125;<br><br>    public String toString()&#123;<br>        return &quot;[name&#x3D;&quot;+name+&quot;,passwords&#x3D;&quot;+passwords+&quot;]&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>UserController：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Controller<br>public class UserController &#123;<br><br>    @RequestMapping(&quot;&#x2F;test&quot;)<br>    @ResponseBody<br>    public String test(User user)&#123;<br>&#x2F;&#x2F;        System.out.println(user+&quot; &quot;+passwords);<br>        System.out.println(user);<br>        String msg &#x3D; &quot;&quot;;<br>        if(user.getName()!&#x3D;null)&#123;<br>            if(user.getName().equals(&quot;123&quot;))&#123;<br>                msg &#x3D;  &quot;ok&quot;;<br>            &#125;else&#123;<br>                msg &#x3D;  &quot;failed&quot;;<br>            &#125;<br>        &#125;<br>        if(user.getPasswords()!&#x3D;null)&#123;<br>            if(user.getPasswords().equals(&quot;1233&quot;))&#123;<br>                msg &#x3D;  &quot;ok&quot;;<br>            &#125;else&#123;<br>                msg &#x3D; &quot;failed&quot;;<br>            &#125;<br>        &#125;<br>        return msg;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<p>jsp文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;s3.pstatp.com&#x2F;cdn&#x2F;expire-1-M&#x2F;jquery&#x2F;3.3.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;script&gt;<br>        function uservalidator() &#123;<br>            $.ajax(&#123;<br>                url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;test&quot;,<br>                data:&#123;&quot;name&quot;:$(&quot;#user&quot;).val(),&quot;passwords&quot;:$(&quot;#passwords&quot;).val()&#125;,<br>                success:function (data) &#123;<br>                    $(&quot;#usermsg&quot;).html(data)<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &lt;&#x2F;script&gt;<br>    &lt;script&gt;<br>        function passwordsvalidator() &#123;<br>            $.ajax(&#123;<br>                url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;test&quot;,<br>                data:&#123;&quot;name&quot;:$(&quot;#user&quot;).val(),&quot;passwords&quot;:$(&quot;#passwords&quot;).val()&#125;,<br>                success:function (data) &#123;<br>                    $(&quot;#pswmsg&quot;).html(data)<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &lt;&#x2F;script&gt;<br>    &lt;form&gt;<br>        用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot; id&#x3D;&quot;user&quot; onblur&#x3D;&quot;uservalidator()&quot;&gt;&lt;br&gt;<br>        &lt;p id&#x3D;&quot;usermsg&quot;&gt;&lt;&#x2F;p&gt;<br>        密码：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;passwords&quot; id&#x3D;&quot;passwords&quot; onblur&#x3D;&quot;passwordsvalidator()&quot;&gt;<br>        &lt;p id&#x3D;&quot;pswmsg&quot;&gt;&lt;&#x2F;p&gt;<br>    &lt;&#x2F;form&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a><strong>拦截器</strong></h1><p>SpringMVC的拦截器和Servlet中的Filter相似，主要用于拦截用户的请求并做相应的处理，通常应用在权限验证、记录请求信息的日志、判断用户是否登录等功能上</p>
<p>定义一个拦截器需要实现HandlerInterceptor接口，HandlerInterceptor接口中有三个方法</p>
<ul>
<li><p>preHandle：该方法在控制器的处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示继续向下执行，返回 false 表示中断后续操作。</p>
</li>
<li><p>postHandle：该方法在控制器的处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型<br>和视图做进一步的修改。</p>
</li>
<li><p>afterCompletion：该方法在控制器的处理请求方法执行完成后执行，即视图渲染结束后执行，可以通过此方法实现一些资源清理、记录日志信息等工作。</p>
</li>
</ul>
<h2 id="拦截器的配置与使用"><a href="#拦截器的配置与使用" class="headerlink" title="拦截器的配置与使用"></a><strong>拦截器的配置与使用</strong></h2><p>在springmvc.controller包下定义一个MyInterceptor类，实现HandlerInterceptor接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class MyInterceptor implements HandlerInterceptor &#123;<br>    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;<br>        System.out.println(&quot;preHandle&quot;);<br>        return true;<br>    &#125;<br><br>    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;<br>        System.out.println(&quot;postHandle&quot;);<br>    &#125;<br><br>    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;<br>        System.out.println(&quot;afterCompletion&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在springmvc-dispatcher.xml中配置拦截器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;mvc:interceptors&gt;<br>       &lt;bean class&#x3D;&quot;springmvc.controller.MyInterceptor&quot;&gt;&lt;&#x2F;bean&gt;<br>   &lt;&#x2F;mvc:interceptors&gt;<br></code></pre></td></tr></table></figure>
<p>&lt;mvc： interceptors&gt; 元素用于配置一组拦截器，其子元素 <bean> 定义的是全局拦截器，即拦截所有的请求。</bean></p>
<p>若还要定义其他拦截器，可在里面加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;mvc:interceptor&gt;<br>       &lt;!-- 配置拦截器作用的路径 --&gt;<br>       &lt;mvc:mapping path&#x3D;&quot;&quot; &#x2F;&gt;<br>       &lt;!-- 配置不需要拦截作用的路径 --&gt;<br>       &lt;mvc:exclude-mapping path&#x3D;&quot;&quot; &#x2F;&gt;<br>       &lt;!-- 定义&lt;mvc:interceptor&gt;元素中，表示匹配指定路径的请求才进行拦截 --&gt;<br>       &lt;bean class&#x3D;&quot;&quot;&#x2F;&gt;<br>   &lt;&#x2F;mvc:interceptor&gt;<br></code></pre></td></tr></table></figure>
<p>&lt;mvc： interceptor&gt; 元素的子元素必须按照 &lt;mvc： mapping…/&gt;、&lt;mvc： exclude-mapping…/&gt;、&lt;bean…/&gt; 的顺序配置。</p>
<p>运行程序，输出端输出：</p>
<p>preHandle<br>springmvc.controller.LoginController<br>postHandle<br>afterCompletion</p>
<h2 id="拦截器的执行流程"><a href="#拦截器的执行流程" class="headerlink" title="拦截器的执行流程"></a><strong>拦截器的执行流程</strong></h2><p>若配置文件中只定义了一个拦截器，则根据 preHandle -&gt; ControllerMethod -&gt; postHandle -&gt; afterCompletion执行</p>
<p>若配置了多个拦截器，则它们的 preHandle 方法将按照配置文件中拦截器的配置顺序执行，而它们的 postHandle 方法和 afterCompletion 方法则按照配置顺序的反序执行</p>
<p>定义一个类MyInterceptor1，和类MyInterceptor一样，MyInterceptor类中的三个方法输出1，MyInterceptor1的三个方法输出2，在springmvc配置文件中定义两个拦截器interceptor、interceptor1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">    &lt;mvc:interceptors&gt;<br>&lt;!--        &lt;bean class&#x3D;&quot;springmvc.controller.MyInterceptor&quot;&gt;&lt;&#x2F;bean&gt;--&gt;<br>        &lt;mvc:interceptor&gt;<br>            &lt;mvc:mapping path&#x3D;&quot;&#x2F;**&quot;&#x2F;&gt;<br>            &lt;bean class&#x3D;&quot;springmvc.controller.MyInterceptor&quot;&gt;&lt;&#x2F;bean&gt;<br>        &lt;&#x2F;mvc:interceptor&gt;<br>        &lt;mvc:interceptor&gt;<br>            &lt;mvc:mapping path&#x3D;&quot;&#x2F;login&quot;&#x2F;&gt;<br>            &lt;bean class&#x3D;&quot;springmvc.controller.MyInterceptor1&quot;&gt;&lt;&#x2F;bean&gt;<br>        &lt;&#x2F;mvc:interceptor&gt;<br>    &lt;&#x2F;mvc:interceptors&gt;<br></code></pre></td></tr></table></figure>

<p>输出端输出：</p>
<p>preHandle 1<br>preHandle 2<br>postHandle 2<br>postHandle 1<br>afterCompletion 2<br>afterCompletion 1</p>
<h2 id="拦截器实例：用户的登录权限验证"><a href="#拦截器实例：用户的登录权限验证" class="headerlink" title="拦截器实例：用户的登录权限验证"></a><strong>拦截器实例：用户的登录权限验证</strong></h2><p>这个WEB应用中，主要有tologin跳转登录页面、login登录页面、result结果页面，如果用户未登录直接进入到result页面，则显示用户未登录，如果用户账号或密码错误，则提示账号或密码错误</p>
<p>在springmvc.interceptor包下添加User类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class User &#123;<br><br>    private String users;<br><br>    private String passwords;<br><br>    &#x2F;&#x2F;省略getter和setter方法<br>&#125;<br></code></pre></td></tr></table></figure>
<p>UserController控制器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Controller<br>public class UserController &#123;<br>    @RequestMapping(&quot;&#x2F;tologin&quot;)<br>    public String tologin()&#123;<br>        return &quot;login&quot;;<br>    &#125;<br>    @RequestMapping(&quot;&#x2F;login&quot;)<br>    public String login(User user, HttpSession session, Model model)&#123;<br>        System.out.println(user.getUsers()+&quot; &quot;+user.getPasswords());<br>        if(&quot;123&quot;.equals(user.getUsers())&amp;&amp;&quot;123&quot;.equals(user.getPasswords()))&#123;<br>            session.setAttribute(&quot;user&quot;,user);<br>            return &quot;redirect:result&quot;;<br>        &#125;<br>        model.addAttribute(&quot;msg&quot;,&quot;用户名或密码错误，请重新登录！&quot;);<br>        return &quot;login&quot;;<br>    &#125;<br>    @RequestMapping(&quot;&#x2F;result&quot;)<br>    public String result()&#123;<br>        return &quot;result&quot;;<br>    &#125;<br><br>    @RequestMapping(&quot;&#x2F;exit&quot;)<br>   	public String exit(HttpServletRequest request,HttpSession session)&#123;<br>       session.invalidate();<br>       return &quot;login&quot;;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<p>创建拦截器loginInterceptor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class loginInterceptor implements HandlerInterceptor &#123;<br><br>    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;<br>        System.out.println(&quot;123&quot;);<br>        StringBuffer url &#x3D; request.getRequestURL();<br>        if(url.indexOf(&quot;&#x2F;tologin&quot;)&gt;&#x3D;0||url.indexOf(&quot;&#x2F;login&quot;)&gt;&#x3D;0) return true;<br>        HttpSession session &#x3D; request.getSession();<br>        Object obj &#x3D; session.getAttribute(&quot;user&quot;);<br>        if(obj !&#x3D; null) return true;<br>        request.setAttribute(&quot;msg&quot;,&quot;请登录！&quot;);<br>        request.getRequestDispatcher(&quot;&#x2F;WEB-INF&#x2F;login.jsp&quot;).forward(request,response);<br>        return false;<br>    &#125;<br><br>    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;<br><br>    &#125;<br><br>    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>配置Dispatcher-servlet.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;<br>       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;<br>       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;<br>       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt;<br>        &lt;context:component-scan base-package&#x3D;&quot;springmvc.interceptor&quot;&gt;&lt;&#x2F;context:component-scan&gt;<br>    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;<br>        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;&quot;&gt;&lt;&#x2F;property&gt;<br>        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&gt;&lt;&#x2F;property&gt;<br>    &lt;&#x2F;bean&gt;<br>    &lt;mvc:interceptors&gt;<br>        &lt;mvc:interceptor&gt;<br>            &lt;mvc:mapping path&#x3D;&quot;&#x2F;**&quot;&#x2F;&gt;<br>            &lt;bean class&#x3D;&quot;springmvc.interceptor.loginInterceptor&quot;&gt;&lt;&#x2F;bean&gt;<br>        &lt;&#x2F;mvc:interceptor&gt;<br>    &lt;&#x2F;mvc:interceptors&gt;<br>&lt;&#x2F;beans&gt;<br></code></pre></td></tr></table></figure>
<p>配置web.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;web-app version&#x3D;&quot;2.4&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee&quot;<br>         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;<br>         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee<br>http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee&#x2F;web-app_2_4.xsd&quot;&gt;<br>    &lt;servlet&gt;<br>        &lt;servlet-name&gt;interceptor&lt;&#x2F;servlet-name&gt;<br>        &lt;servlet-class&gt;<br>            org.springframework.web.servlet.DispatcherServlet<br>        &lt;&#x2F;servlet-class&gt;<br>        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;<br>    &lt;&#x2F;servlet&gt;<br>    &lt;servlet-mapping&gt;<br>        &lt;servlet-name&gt;interceptor&lt;&#x2F;servlet-name&gt;<br>        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;<br>    &lt;&#x2F;servlet-mapping&gt;<br>&lt;&#x2F;web-app&gt;<br></code></pre></td></tr></table></figure>
<p>login.jsp：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;$Title$&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;$&#123;msg&#125;&lt;&#x2F;h1&gt;<br>&lt;form method&#x3D;&quot;get&quot; action&#x3D;&quot;&#x2F;login&quot;&gt;<br>    账号：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;users&quot; id&#x3D;&quot;users&quot;&gt;&lt;br&gt;<br>    密码：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;passwords&quot; id&#x3D;&quot;passwords&quot;&gt;&lt;br&gt;<br>    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot; &gt;<br>&lt;&#x2F;form&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p>result.jsp：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;p&gt;当前用户：$&#123;user.users&#125;&lt;&#x2F;p&gt;<br>    &lt;form action&#x3D;&quot;&#x2F;exit&quot;&gt;<br>        &lt;button type&#x3D;&quot;submit&quot;&gt;退出&lt;&#x2F;button&gt;<br>    &lt;&#x2F;form&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p>直接进入result<br><img src="/2020/10/04/SpringMVC/1.png" alt="1"></p>
<p>输入账号密码<br><img src="/2020/10/04/SpringMVC/2.png" alt="2"></p>
<p>退出<br><img src="/2020/10/04/SpringMVC/3.png" alt="3"></p>
<p>再次直接进入result<br><img src="/2020/10/04/SpringMVC/4.png" alt="4"></p>
<h1 id="验证器"><a href="#验证器" class="headerlink" title="验证器"></a><strong>验证器</strong></h1><h2 id="Validator接口"><a href="#Validator接口" class="headerlink" title="Validator接口"></a><strong>Validator接口</strong></h2><p>创建自定义的验证器需要实现org.springframework.validation.Validator 接口，该接口有两个接口方法：</p>
<p>boolean supports(Class&lt;?&gt; klass)<br>void validate(Object object,Errors errors)</p>
<p>当supports返回true时，验证器可以处理指定的Class</p>
<p>validate 方法的功能是验证目标对象 object，并将验证错误消息存入 Errors 对象</p>
<p>往 Errors 对象存入错误消息的方法是 reject 或 rejectValue，这两个方法的部分重载方法如下：</p>
<p>void reject(String errorCode)<br>void reject(String errorCode,String defaultMessage)<br>void rejectValue(String filed,String errorCode)<br>void rejectValue(String filed,String errorCode,String defaultMessage)</p>
<h2 id="ValidationUtils类"><a href="#ValidationUtils类" class="headerlink" title="ValidationUtils类"></a><strong>ValidationUtils类</strong></h2><p>org.springframework.validation.ValidationUtils 是一个工具类</p>
<h2 id="验证器实例"><a href="#验证器实例" class="headerlink" title="验证器实例"></a>验证器实例</h2><p>引用上面用户登录的例子，当用户用户名或密码为空的时候，提示错误</p>
<p>在springmvc.validator包下创建MyValidator类，实现Validator接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@Component<br>public class MyValidator implements Validator &#123;<br>    public boolean supports(Class&lt;?&gt; aClass) &#123;<br>        return User.class.isAssignableFrom(aClass);<br>    &#125;<br><br>    public void validate(Object o, Errors errors) &#123;<br>        User user &#x3D; (User)o;<br>        ValidationUtils.rejectIfEmpty(errors,&quot;users&quot;,&quot;user.users.required&quot;);<br>        ValidationUtils.rejectIfEmpty(errors,&quot;passwords&quot;,&quot;passwords.invalid&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在interceptor-servlet.xml中添加对validator包的自动扫描机制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">        &lt;context:component-scan base-package&#x3D;&quot;springmvc.validator&quot;&gt;&lt;&#x2F;context:component-scan&gt;<br><br>修改UserController中的login处理方法<br><br>    public String login(@ModelAttribute User user, HttpSession session, Model model, BindingResult result)&#123;<br>        MyValidator myValidator &#x3D; new MyValidator();<br>        if(myValidator.supports(User.class))&#123;<br>        	myValidator.validate(user,result);<br>            List&lt;ObjectError&gt; list &#x3D; result.getAllErrors();<br>            for(ObjectError error:list)&#123;<br>                System.out.println(error.getCode());<br>            &#125;<br>        &#125;<br>        if(result.hasErrors())  return &quot;redirect:tologin&quot;;<br>        if(&quot;123&quot;.equals(user.getUsers())&amp;&amp;&quot;123&quot;.equals(user.getPasswords()))&#123;<br>            session.setAttribute(&quot;user&quot;,user);<br>            return &quot;redirect:result&quot;;<br>        &#125;<br>        model.addAttribute(&quot;msg&quot;,&quot;用户名或密码错误，请重新登录！&quot;);<br>        return &quot;login&quot;;<br>    &#125;<br></code></pre></td></tr></table></figure>
<p>此时，若不输入账号密码直接登录，则终端输出</p>
<p>user.users.required<br>passwords.invalid</p>
<p>##<strong>Spring MVC JSR-303验证框架之Hibernate-Validator</strong></p>
<p>JSR-303是一个数据验证的规范，JSR-303的校验是基于注解的，Spring中没有对这一规范进行实现，所以在SpringMVC中使用JSR-303的时候就需要提供一个对JSR-303规范的实现，而Hibernate-Validator是实现了这一规范的，使用Hibernate-Validator进行验证，不再需要实现Validator接口</p>
<p>Hibernate-Validator内部已经定义好了一系列的限制注解，我们只需要把这些注解标记在需要验证的实体类的属性上或是其对应的get方法上</p>
<p><strong>注：要使用Hibernate-Validator进行验证，需要在配置文件中加上</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;mvc:annotation-driven&#x2F;&gt;  <br></code></pre></td></tr></table></figure>
<p><strong>并添加依赖：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">dependency&gt;<br>           &lt;groupId&gt;org.hibernate&lt;&#x2F;groupId&gt;<br>           &lt;artifactId&gt;hibernate-validator&lt;&#x2F;artifactId&gt;<br>           &lt;version&gt;6.1.6.Final&lt;&#x2F;version&gt;<br>   &lt;&#x2F;dependency&gt;<br></code></pre></td></tr></table></figure>

<p>使用Hibernate-Validator进行验证，可以在要验证的 类的属性 或 getter方法加上相应的注解</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@Nul</td>
<td>被注释的元素必须为 null</td>
</tr>
<tr>
<td>@NotNull</td>
<td>被注释的元素必须不为 null</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>被注释的元素必须为 true</td>
</tr>
<tr>
<td>@AssertFalse</td>
<td>被注释的元素必须为 false</td>
</tr>
<tr>
<td>@Min(value)</td>
<td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td>@Max(value)</td>
<td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td>@DecimalMin(value)</td>
<td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td>@DecimalMax(value)</td>
<td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td>@Size(max, min)</td>
<td>被注释的元素的大小必须在指定的范围内，元素必须为集合，代表集合个数</td>
</tr>
<tr>
<td>@Digits (integer, fraction)</td>
<td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td>
</tr>
<tr>
<td>@Past</td>
<td>被注释的元素必须是一个过去的日期</td>
</tr>
<tr>
<td>@Future</td>
<td>被注释的元素必须是一个将来的日期</td>
</tr>
<tr>
<td>@Email</td>
<td>被注释的元素必须是电子邮箱地址</td>
</tr>
<tr>
<td>@Length(min=, max=)</td>
<td>被注释的字符串的大小必须在指定的范围内，必须为数组或者字符串，若微数组则表示为数组长度，字符串则表示为字符串长度</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>被注释的字符串的必须非空</td>
</tr>
<tr>
<td>@Range(min=, max=)</td>
<td>被注释的元素必须在合适的范围内</td>
</tr>
<tr>
<td>@NotBlank</td>
<td>被注释的字符串的必须非空</td>
</tr>
<tr>
<td>@Pattern(regexp = )</td>
<td>正则表达式校验</td>
</tr>
<tr>
<td>@Valid</td>
<td>对象级联校验,即校验对象中对象的属性</td>
</tr>
</tbody></table>
<p>如：</p>
<p>在User的字段中添加标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">public class User &#123;<br><br>    @NotBlank(message &#x3D; &quot;用户名不能为空&quot;)<br>    private String users;<br><br>    @NotBlank(message &#x3D; &quot;密码不能为空&quot;)<br>   	@Length(min &#x3D; 3,max &#x3D; 8,message &#x3D; &quot;密码位数为3-8位&quot;)<br>    private String passwords;<br><br>    &#x2F;&#x2F;省略getter和setter方法<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在UserController添加test处理方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@RequestMapping(&quot;&#x2F;test&quot;)<br>public String test(@Valid User user,BindingResult result)&#123;<br>    if(result.hasErrors())&#123;<br>        for (ObjectError error:result.getAllErrors())&#123;<br>            System.out.println(error.getDefaultMessage());<br>        &#125;<br>    &#125;<br>    return &quot;test&quot;;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>test页面和login页面一样（省去拦截器）</p>
<p>部署项目，此时，如果账号密码都为空，直接登录，则输出</p>
<p>用户名不能为空<br>密码位数为3-8位<br>密码不能为空</p>
<h1 id="RESTful风格"><a href="#RESTful风格" class="headerlink" title="RESTful风格"></a><strong>RESTful风格</strong></h1><p>RESTful风格是一个资源定位及操作的风格，它既不是标准也不是协议，仅仅只是一种风格，主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>
<p>使用RESTful风格可以通过相同的请求方式实现不同的效果，对于相同的请求方式，只要在表单元素中使用不同的method，然后在mvc的控制器相应的处理方法中使用不同的method作出回应，即可实现</p>
<p>原来的请求方式：</p>
<p><a href="http://localhost:8080/login?name=123&amp;passwords=123">http://localhost:8080/login?name=123&amp;passwords=123</a></p>
<p>使用RESTful风格：</p>
<p><a href="http://localhost:8080/login/123/123">http://localhost:8080/login/123/123</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@RequestMapping(&quot;&#x2F;test&#x2F;&#123;name&#125;&#x2F;&#123;passwords&#125;&quot;)<br>public String login(@PathVariable int name,@PathVariable String passwords)&#123;<br>    System.out.println(name);<br>    System.out.println(passwords);<br>    return &quot;newresult&quot;;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>newresult页面为新jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;登录成功&lt;&#x2F;h1&gt;<br>    $&#123;name&#125;<br>    &lt;br&gt;<br>    $&#123;passwords&#125;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<p>还可以使用对应于表单中的请求方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@RequestMapping(&quot;&#x2F;test&quot;,method &#x3D; RequestMethod.POST)<br>public String login(@PathVariable int name,@PathVariable String passwords)&#123;<br>    System.out.println(name);<br>    System.out.println(passwords);<br>    return &quot;newresult&quot;;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>此时，若表单中的请求方式为post，则会出现405方法不允许错误</p>
<p>也可以使用基于注解的请求方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">@GetMapping(&quot;&#x2F;login&#x2F;&#123;name&#125;&#x2F;&#123;passwords&#125;&quot;)<br>public String login(@PathVariable int name, @PathVariable String passwords, Model model)&#123;<br>    model.addAttribute(&quot;name&quot;,name);<br>    model.addAttribute(&quot;passwords&quot;,passwords);<br>    return &quot;result&quot;;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>java</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
</search>
